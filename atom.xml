<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Puxuan</title>
 <link href="http://puxuan.coding.me//atom.xml" rel="self"/>
 <link href="http://puxuan.coding.me//"/>
 <updated>2016-12-10T09:11:36+08:00</updated>
 <id>http://puxuan.coding.me/</id>
 <author>
   <name>Puxuan Yu</name>
   <email></email>
 </author>

 
 <entry>
   <title>Efficient Graph-based Image Segmentation</title>
   <link href="http://puxuan.coding.me//2016/12/07/image-segmention/"/>
   <updated>2016-12-07T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/12/07/image-segmention</id>
   <content type="html">&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Paper: &lt;em&gt;Efficient Graph-Based Image Segmentation&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;IJCV, Sep. 2004&lt;/li&gt;
      &lt;li&gt;Pedro F. Felzenszwalb @ MIT&lt;/li&gt;
      &lt;li&gt;Daniel P. Huttenlocher @ Cornell&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code implementation
    &lt;ul&gt;
      &lt;li&gt;http://cs.brown.edu/~pff/segment/&lt;/li&gt;
      &lt;li&gt;written in C++&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-we-need-segmentation&quot;&gt;Why we need segmentation?&lt;/h2&gt;

&lt;p&gt;A wide range of computational vision problems could in principle make good use of segmented images, were such segmentations &lt;strong&gt;reliably and efficiently computable&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intermediate-level vision problems such as stereo and motion estimation require an appropriate region of support for correspondence operations.&lt;/li&gt;
  &lt;li&gt;Spatially non-uniform regions of support can be identified using segmentation techniques.&lt;/li&gt;
  &lt;li&gt;Higher-level problems such as recognition and image indexing can also make use of segmentation results in matching, to address problems such as figure-ground separation and recognition by parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Capture important groupings or regions, which often reflect global aspects of the image.&lt;/li&gt;
  &lt;li&gt;Be highly efficient (&lt;strong&gt;running in time nearly linear in the number of image pixels&lt;/strong&gt;). In order to be of practical use, segmentation methods should run at speeds similar to edge detection or other low-level visual processing techniques.
    &lt;ul&gt;
      &lt;li&gt;application: video processing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;basic-approach&quot;&gt;Basic Approach&lt;/h2&gt;

&lt;p&gt;Graph-based image segmentation techniques represent the problem in terms of a &lt;strong&gt;undirected graph &lt;span class=&quot;MathJax_Preview&quot;&gt;G = (V,E)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;G = (V,E)&lt;/script&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Each node &lt;span class=&quot;MathJax_Preview&quot;&gt;v_i \in V&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;v_i \in V&lt;/script&gt; corresponds to a pixel in the image&lt;/li&gt;
  &lt;li&gt;The edges &lt;span class=&quot;MathJax_Preview&quot;&gt;e_i \in E&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;e_i \in E&lt;/script&gt; connect certain pairs of neighboring pixels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the case of image segmentation, the elements in &lt;span class=&quot;MathJax_Preview&quot;&gt;V&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt; are pixels and the weight of an edge is some measure of the dissimilarity between the two pixels connected by that edge. e.g., the difference in&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;intensity&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;color&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;motion&lt;/li&gt;
  &lt;li&gt;location&lt;/li&gt;
  &lt;li&gt;some other local attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;w(v_i,v_j)=\sqrt{(\Delta{r})^2+(\Delta{g})^2+(\Delta{b})^2}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w(v_i,v_j)=\sqrt{(\Delta{r})^2+(\Delta{g})^2+(\Delta{b})^2}&lt;/script&gt;

&lt;p&gt;Rewritting in Python be like…&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;diff_rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;diff_grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;classical-clustering&quot;&gt;Classical Clustering&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Un-adaptive criterion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/QQ20161208-191011.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Widely varying intensities should not alone be judged as evidence for multiple regions. It is not adequate to assume that regions have nearly constant or &lt;strong&gt;slowly varying intensities&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The intensity difference across the boundary between the ramp and the constant region is actually smaller than many of the intensity differences within the high variability region. Thus, in order to segment such an image, some kind of &lt;strong&gt;adaptive or non-local criterion&lt;/strong&gt; must be used.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;in-short&quot;&gt;In Short…&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Classical clustering methods use &lt;strong&gt;stable, “global” and unadaptive&lt;/strong&gt; criterion to fill in the &lt;span class=&quot;MathJax_Preview&quot;&gt;e_i \in E&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;e_i \in E&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;The earliest graph-based methods use &lt;strong&gt;fixed&lt;/strong&gt; thresholds and &lt;strong&gt;local&lt;/strong&gt; measures in computing a segmentation. (C.T.Zahn., IEEE Transactions on Computing, 1971.)&lt;/li&gt;
      &lt;li&gt;Not good enough!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We want adapative criterion for different situations to make better decisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;predicate&quot;&gt;Predicate&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Define the &lt;strong&gt;internal difference&lt;/strong&gt; of a component &lt;span class=&quot;MathJax_Preview&quot;&gt;C \in V&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;C \in V&lt;/script&gt; to be the largest weight in the &lt;strong&gt;minimum spanning tree&lt;/strong&gt; of the component, &lt;span class=&quot;MathJax_Preview&quot;&gt;MST(C,E)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;MST(C,E)&lt;/script&gt;. That is,&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;Int(C)=\max_{e \in MST(C,E)} w(e)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Int(C)=\max_{e \in MST(C,E)} w(e)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Define the difference between two components &lt;span class=&quot;MathJax_Preview&quot;&gt;C_1, C_2 \in V&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;C_1, C_2 \in V&lt;/script&gt; to be the minimum weight edge connecting the two components. That is,&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;Dif(C_1,C_2)=\min_{v_i \in C_1,v_j \in C_2,(v_i,v_j)\in E}w((v_i,v_j))&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Dif(C_1,C_2)=\min_{v_i \in C_1,v_j \in C_2,(v_i,v_j)\in E}w((v_i,v_j))&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;This measure of difference could &lt;strong&gt;in principle&lt;/strong&gt; be problematic, because it reflects only the smallest edge weight between two components. In practice, the measure works quite well in spite of this apparent limitation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;region comparison predicate&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;If the difference between the components, &lt;strong&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Dif(C_1,C_2)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Dif(C_1,C_2)&lt;/script&gt;&lt;/strong&gt; is large relative to the internal difference within &lt;strong&gt;at least&lt;/strong&gt; one of the components, &lt;strong&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Int(C_1)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Int(C_1)&lt;/script&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Int(C_2)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Int(C_2)&lt;/script&gt;&lt;/strong&gt;, then there is evidence for a boundary between a pair or components&lt;/p&gt;

&lt;p&gt;We define the &lt;strong&gt;pairwise comparison predicate&lt;/strong&gt; as,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/QQ20161208-195420.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where the minimum internal difference, &lt;span class=&quot;MathJax_Preview&quot;&gt;MInt&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;MInt&lt;/script&gt;, is defined as,&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;MInt(C_1,C_2)=\min(Int(C_1)+\tau(C_1),Int(C_2)+\tau(C_2))&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;MInt(C_1,C_2)=\min(Int(C_1)+\tau(C_1),Int(C_2)+\tau(C_2))&lt;/script&gt;

&lt;p&gt;A threshold function &lt;span class=&quot;MathJax_Preview&quot;&gt;\tau&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\tau&lt;/script&gt; is used to control &lt;strong&gt;the degree&lt;/strong&gt; to which &lt;strong&gt;the difference between components must be larger than minimum internal difference&lt;/strong&gt; (so that &lt;span class=&quot;MathJax_Preview&quot;&gt;D&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; can be true).&lt;/p&gt;

&lt;p&gt;In the extreme case, when &lt;span class=&quot;MathJax_Preview&quot;&gt;\vert C\vert = 1,Int(C) = 0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\vert C\vert = 1,Int(C) = 0&lt;/script&gt;. Therefore, we use a threshold function based on the size of the component,&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\tau (C)=k/\vert C\vert&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau (C)=k/\vert C\vert&lt;/script&gt;

&lt;p&gt;That is, for small components we require stronger evidence for a boundary. In practice &lt;span class=&quot;MathJax_Preview&quot;&gt;k&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; sets a scale of observation, in that a larger &lt;span class=&quot;MathJax_Preview&quot;&gt;k&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; causes a preference for larger components.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;new-algorithm&quot;&gt;New Algorithm&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Definition 1&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;A segmentation &lt;span class=&quot;MathJax_Preview&quot;&gt;S&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; is too &lt;strong&gt;fine&lt;/strong&gt; if there is some pair of regions &lt;span class=&quot;MathJax_Preview&quot;&gt;C_1, C_2 \in S&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;C_1, C_2 \in S&lt;/script&gt; for which there is no evidence for a boundary between them.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Definition 2&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;A segmentation &lt;span class=&quot;MathJax_Preview&quot;&gt;S&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; is too coarse when there exists a proper refinement of &lt;span class=&quot;MathJax_Preview&quot;&gt;S&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; that is not too fine.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Property 1&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;For any (finite) graph &lt;span class=&quot;MathJax_Preview&quot;&gt;G = (V, E)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;G = (V, E)&lt;/script&gt; there exists some segmentation &lt;span class=&quot;MathJax_Preview&quot;&gt;S&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; that is neither too coarse nor too fine.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;Segmentation algorithm.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: a graph &lt;span class=&quot;MathJax_Preview&quot;&gt;G=(V,E)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;G=(V,E)&lt;/script&gt;, &lt;span class=&quot;MathJax_Preview&quot;&gt;n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; vertices and &lt;span class=&quot;MathJax_Preview&quot;&gt;m&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; edges.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: a segmentation of &lt;span class=&quot;MathJax_Preview&quot;&gt;V&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt; into components &lt;span class=&quot;MathJax_Preview&quot;&gt;S=(C_1,\cdots,C_r)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S=(C_1,\cdots,C_r)&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;0.Sort &lt;span class=&quot;MathJax_Preview&quot;&gt;E&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;E&lt;/script&gt; into &lt;span class=&quot;MathJax_Preview&quot;&gt;\pi = (o_1,\cdots,o_m)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\pi = (o_1,\cdots,o_m)&lt;/script&gt;, by non-decreasing edge weight.&lt;/p&gt;

&lt;p&gt;1.Start with a segmentation &lt;span class=&quot;MathJax_Preview&quot;&gt;S^0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^0&lt;/script&gt;, where each vertex &lt;span class=&quot;MathJax_Preview&quot;&gt;v_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;v_i&lt;/script&gt; is in its own component.&lt;/p&gt;

&lt;p&gt;2.Repeat step 3 for &lt;span class=&quot;MathJax_Preview&quot;&gt;q = 1,\cdots,m&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;q = 1,\cdots,m&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;3.Given &lt;span class=&quot;MathJax_Preview&quot;&gt;S^{q-1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^{q-1}&lt;/script&gt;, construct &lt;span class=&quot;MathJax_Preview&quot;&gt;S^q&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^q&lt;/script&gt; as follows.&lt;/p&gt;

&lt;p&gt;Let &lt;span class=&quot;MathJax_Preview&quot;&gt;v_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;v_i&lt;/script&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;v_j&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;v_j&lt;/script&gt; denote vertices connected by the q-th edge, i.e., &lt;span class=&quot;MathJax_Preview&quot;&gt;o_q=(v_i,v_j)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;o_q=(v_i,v_j)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;v_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;v_i&lt;/script&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;v_j&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;v_j&lt;/script&gt; are in disjoint components of &lt;span class=&quot;MathJax_Preview&quot;&gt;S^{q-1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^{q-1}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;w(o_q) \le MInt(C_i^{q-1},C_j^{q-1})&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;w(o_q) \le MInt(C_i^{q-1},C_j^{q-1})&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, &lt;span class=&quot;MathJax_Preview&quot;&gt;S^q&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^q&lt;/script&gt; is obtained from &lt;span class=&quot;MathJax_Preview&quot;&gt;S^{q-1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^{q-1}&lt;/script&gt; by merging &lt;span class=&quot;MathJax_Preview&quot;&gt;C_i^{q-1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;C_i^{q-1}&lt;/script&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;C_j^{q-1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;C_j^{q-1}&lt;/script&gt;.
Otherwise, &lt;span class=&quot;MathJax_Preview&quot;&gt;S^q=S^{q-1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S^q=S^{q-1}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;4.Return &lt;span class=&quot;MathJax_Preview&quot;&gt;S=S^m&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S=S^m&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;coding&quot;&gt;Coding&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Rewritten in python&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;segment_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sorted_graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threshold_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a_condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_condition&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            								&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_small_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;finally-the-outcomes&quot;&gt;Finally, the outcomes!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/t2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/r2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/t3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/r3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/tt1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/rr1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/tt2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/rr2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/tt6.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;MInt(C_1,C_2)=\min(Int(C_1)+\tau(C_1),Int(C_2)+\tau(C_2)),\tau (C)=k/|C|&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;MInt(C_1,C_2)=\min(Int(C_1)+\tau(C_1),Int(C_2)+\tau(C_2)),\tau (C)=k/|C|&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/rr61.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;k=500,\#comp=310&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;k=500,\#comp=310&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/seg/rr62.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;k=1000,\#comp=131&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;k=1000,\#comp=131&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>XGBoost详解</title>
   <link href="http://puxuan.coding.me//2016/11/11/intro-to-xgboost/"/>
   <updated>2016-11-11T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/11/11/intro-to-xgboost</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;The impact of the system has been widely recognized in a number of machine learning and data mining challenges. Take the challenges hosted by the machine learning competition site Kaggle for example. Among the 29 challenge winning solutions published at Kaggle’s blog during 2015, 17 solutions used XGBoost. &lt;strong&gt;Among these solutions, eight solely used XGBoost to train the model, while most others combined XGBoost with neural nets in ensembles. For comparison, the second most popular method, deep neural nets, was used in 11 solutions.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上是XGBoost的主要作者陈天奇在论文里对该算法有效性的说明。&lt;/p&gt;

&lt;p&gt;本文分成三部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有监督学习的关键概念&lt;/li&gt;
  &lt;li&gt;XGBoost算法详解&lt;/li&gt;
  &lt;li&gt;从最简单的决策树到XGBoost的过程&lt;/li&gt;
  &lt;li&gt;对XGBoost的一些思考&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;一、有监督学习的关键概念&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;记号：&lt;span class=&quot;MathJax_Preview&quot;&gt;x_i\in\mathbf{R}^d&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;x_i\in\mathbf{R}^d&lt;/script&gt;代表第&lt;span class=&quot;MathJax_Preview&quot;&gt;i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;个训练数据&lt;/li&gt;
  &lt;li&gt;模型：如何由给定的&lt;span class=&quot;MathJax_Preview&quot;&gt;x_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt;做出预测&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;线性模型：&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}=\Sigma_jw_jx_{ij}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}=\Sigma_jw_jx_{ij}&lt;/script&gt; （包括线性和逻辑回归）&lt;/li&gt;
      &lt;li&gt;根据不同的任务，预测值&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}&lt;/script&gt;有不同的含义
        &lt;ul&gt;
          &lt;li&gt;线性回归：&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}&lt;/script&gt;是我们需要的预测的结果&lt;/li&gt;
          &lt;li&gt;逻辑回归：&lt;span class=&quot;MathJax_Preview&quot;&gt;\frac{1}{1+e^{-\hat{y_i}}}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{1+e^{-\hat{y_i}}}&lt;/script&gt;是结果为正的概率&lt;/li&gt;
          &lt;li&gt;其他… 比如在排序过程中，&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}&lt;/script&gt;可以是排序得分&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;参数：我们需要从数据中学习到的知识
    &lt;ul&gt;
      &lt;li&gt;线性模型：&lt;span class=&quot;MathJax_Preview&quot;&gt;\Theta = \{w_j\mid j=1,...,d\}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Theta = \{w_j\mid j=1,...,d\}&lt;/script&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;目标函数：&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj(\Theta) = L(\Theta) + \color{red}{\Omega(\Theta)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj(\Theta) = L(\Theta) + \color{red}{\Omega(\Theta)}&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;L(\Theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;L(\Theta)&lt;/script&gt;是训练损失函数(training loss)，测算模型在测试数据上的&lt;strong&gt;准确度&lt;/strong&gt;。训练集上的损失：&lt;span class=&quot;MathJax_Preview&quot;&gt;L=\Sigma^n_{i=1}l(y_i,\hat{y_i})&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;L=\Sigma^n_{i=1}l(y_i,\hat{y_i})&lt;/script&gt;
        &lt;ul&gt;
          &lt;li&gt;平方损失:&lt;span class=&quot;MathJax_Preview&quot;&gt;l(y_i,\hat{y_i})=(y_i-\hat{y_i})^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;l(y_i,\hat{y_i})=(y_i-\hat{y_i})^2&lt;/script&gt;&lt;/li&gt;
          &lt;li&gt;逻辑损失:&lt;span class=&quot;MathJax_Preview&quot;&gt;l(y_i,\hat{y_i})=y_iln(1+e^{-\hat{y_i}})+(1-y_i)ln(1+e^{\hat{y_i}})&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;l(y_i,\hat{y_i})=y_iln(1+e^{-\hat{y_i}})+(1-y_i)ln(1+e^{\hat{y_i}})&lt;/script&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;\Omega(\Theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Omega(\Theta)&lt;/script&gt;是正则化(regularization)，测算模型的复杂度
        &lt;ul&gt;
          &lt;li&gt;L2 norm:&lt;span class=&quot;MathJax_Preview&quot;&gt;\Omega(w)=\lambda\|w\|^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Omega(w)=\lambda\|w\|^2&lt;/script&gt;&lt;/li&gt;
          &lt;li&gt;L1 norm (lasso):&lt;span class=&quot;MathJax_Preview&quot;&gt;\Omega(w)=\lambda\|w\|_1&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Omega(w)=\lambda\|w\|_1&lt;/script&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;xgboost&quot;&gt;二、XGBoost算法详解&lt;/h2&gt;

&lt;p&gt;在XGBoost中，我们在一个迭代的过程中，每一次迭代种一棵树，种这一棵树的目的是与之前的树合起来，使预测值在梯度方向上与准确值接近。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;现在，问题1：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;怎么知道预测值与准确值接近？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了解决这个问题，我们定义一个目标函数&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;，第t次迭代的目标函数写成&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;！&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=L(\theta)+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=L(\theta)+\Omega(\theta)&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(&lt;span class=&quot;MathJax_Preview&quot;&gt;y_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y_i&lt;/script&gt;是准确值，&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}^{(t)}&lt;/script&gt;是本轮&lt;span class=&quot;MathJax_Preview&quot;&gt;t&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;给出预测值)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=L(y_i,\hat{y_i}^{(t)})+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=L(y_i,\hat{y_i}^{(t)})+\Omega(\theta)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(将&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}^{(t)}&lt;/script&gt;展开)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=L(y_i,\hat{y_i}^{(t-1)}+\color{red}{f_t(x)})+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=L(y_i,\hat{y_i}^{(t-1)}+\color{red}{f_t(x)})+\Omega(\theta)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上式中&lt;span class=&quot;MathJax_Preview&quot;&gt;\Omega&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt;是正则化项，防止模型过拟合，无论如何，&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;主要刻画的是预测值和真实值的差距。我们现在的目的就是让当前次迭代中种出来树使&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;最小。这就解决了问题1✅&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;问题2：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;函数跟树有什么关系？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在思考XGBoost的时候一定要有这样一个概念：“树就是函数，函数就是树”。上式中的&lt;span class=&quot;MathJax_Preview&quot;&gt;f_t(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f_t(x)&lt;/script&gt;是我们要找的函数，通过树的形式来实现。我们知道树从最初的一个节点开始生长，是不断分叉的过程；我们的想法是，通过&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;改变节点上用于分叉的特征&lt;/li&gt;
  &lt;li&gt;改变特征的阈值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一遍遍尝试分叉的可能性，看看哪种树的形态可以算出最低的&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;要解决问题2，我们尝试提出并解决问题3:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;给定树的结构，如何算出&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;的值？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回到&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;的计算。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=L(\theta)+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=L(\theta)+\Omega(\theta)&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}^{(t)}&lt;/script&gt;是本轮&lt;span class=&quot;MathJax_Preview&quot;&gt;t&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;给出预测值)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=L(y_i,\hat{y_i}^{(t)})+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=L(y_i,\hat{y_i}^{(t)})+\Omega(\theta)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(将&lt;span class=&quot;MathJax_Preview&quot;&gt;\hat{y_i}^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{y_i}^{(t)}&lt;/script&gt;展开)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=L(y_i,\hat{y_i}^{(t-1)}+{f_t(x_i)})+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=L(y_i,\hat{y_i}^{(t-1)}+{f_t(x_i)})+\Omega(\theta)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(展开为n个样本的损失函数)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=\Sigma_{i=1}^nl(y_i,\hat{y_i}^{(t-1)}+{f_t(x_i)})+\Omega(f_t)+\mathbf{C}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=\Sigma_{i=1}^nl(y_i,\hat{y_i}^{(t-1)}+{f_t(x_i)})+\Omega(f_t)+\mathbf{C}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;感觉有点算不下去了，不过泰勒展开在这里可以帮我们一个大忙。要是不记得泰勒展开了：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;f(x+\Delta{x})\approx f(x)+f'(x)\Delta{x}+\frac12f''(x)\Delta{x}^2+\cdots&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x+\Delta{x})\approx f(x)+f'(x)\Delta{x}+\frac12f''(x)\Delta{x}^2+\cdots&lt;/script&gt;

&lt;p&gt;定义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;样本i的一阶导&lt;span class=&quot;MathJax_Preview&quot;&gt;g_i=\partial_{\hat{y}^{(t-1)}}l(y_i,\hat{y_i}^{(t-1)})&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;g_i=\partial_{\hat{y}^{(t-1)}}l(y_i,\hat{y_i}^{(t-1)})&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;样本i的二阶导&lt;span class=&quot;MathJax_Preview&quot;&gt;h_i=\partial^2_{\hat{y}^{(t-1)}}l(y_i,\hat{y_i}^{(t-1)})&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;h_i=\partial^2_{\hat{y}^{(t-1)}}l(y_i,\hat{y_i}^{(t-1)})&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后继续展开：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=\Sigma_{i=1}^nl(y_i,\hat{y_i}^{(t-1)}+{f_t(x_i)})+\Omega(f_t)+\mathbf{C}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=\Sigma_{i=1}^nl(y_i,\hat{y_i}^{(t-1)}+{f_t(x_i)})+\Omega(f_t)+\mathbf{C}&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(展开)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;= \Sigma^n_{i=1}[l(y_i,\hat{y_i}^{(t-1)})+g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\Omega(f_t)+\mathbf{C}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;= \Sigma^n_{i=1}[l(y_i,\hat{y_i}^{(t-1)})+g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\Omega(f_t)+\mathbf{C}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(去掉非变量)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\Omega(f_t)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\Omega(f_t)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;定义正则项，刻画一棵树的复杂度&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\Omega(f_t)=\gamma\color{red}{ T}+\color{aqua}{\frac12 \lambda \Sigma^t_{j=1}w^2_j}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Omega(f_t)=\gamma\color{red}{ T}+\color{aqua}{\frac12 \lambda \Sigma^t_{j=1}w^2_j}&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/xgboostPic/QQ20161019-7.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;是叶子的数目，后面是一个l2 norm。继续刚才的式子：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\Omega(f_t)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\Omega(f_t)&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\gamma{ T}+{\frac12 \lambda \Sigma^t_{j=1}w^2_j}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\gamma{ T}+{\frac12 \lambda \Sigma^t_{j=1}w^2_j}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;现在式子没有办法化简了，因为&lt;span class=&quot;MathJax_Preview&quot;&gt;L(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;L(\theta)&lt;/script&gt;是按照&lt;span class=&quot;MathJax_Preview&quot;&gt;n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个样本来分的，而&lt;span class=&quot;MathJax_Preview&quot;&gt;\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Omega(\theta)&lt;/script&gt;是按照&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;个叶子来分的。既然同一个叶子上的样本函数值也相同，我们可以试图将&lt;span class=&quot;MathJax_Preview&quot;&gt;n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个样本转化为&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;个叶子。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;现在一并解决问题2、3&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;叶子上的得分串成一个向量，再构造映射函数把实例映射到叶子上去&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;f_t(x)=w_{q(x)},w\in\mathbf{R}^T,q:\mathbf{R}^d\mapsto\{1,2,...,T\}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_t(x)=w_{q(x)},w\in\mathbf{R}^T,q:\mathbf{R}^d\mapsto\{1,2,...,T\}&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;是树叶子的权重（得分），&lt;span class=&quot;MathJax_Preview&quot;&gt;q&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt;是树的结构；&lt;span class=&quot;MathJax_Preview&quot;&gt;q(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;q(x)&lt;/script&gt;将输入样本转化为所在叶子的编号。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/xgboostPic/QQ20161019-6.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义叶子&lt;span class=&quot;MathJax_Preview&quot;&gt;j&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;中的实例组为&lt;span class=&quot;MathJax_Preview&quot;&gt;I_j=\{i\mid q(x_i)=j\}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;I_j=\{i\mid q(x_i)=j\}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;把&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;函数中的损失函数按照&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;个叶子重新展开&lt;/li&gt;
  &lt;li&gt;对于同一个叶子上的样本，定义&lt;span class=&quot;MathJax_Preview&quot;&gt;G_j=\Sigma_{i\in I_j}g_i,H_j=\Sigma_{i\in I_j}h_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;G_j=\Sigma_{i\in I_j}g_i,H_j=\Sigma_{i\in I_j}h_i&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\gamma{ T}+{\frac12 \lambda \Sigma^t_{j=1}w^2_j}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;= \Sigma^n_{i=1}[g_if_t(x_i)+\frac12h_if_t^2(x_i)]+\gamma{ T}+{\frac12 \lambda \Sigma^t_{j=1}w^2_j}&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=\Sigma^n_{i=1}[g_iw_q(x_i)+\frac12 h_iw^2_q(x_i)]+\gamma T+\frac12 \lambda\Sigma^T_{j=1}w^2_j&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=\Sigma^n_{i=1}[g_iw_q(x_i)+\frac12 h_iw^2_q(x_i)]+\gamma T+\frac12 \lambda\Sigma^T_{j=1}w^2_j&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=\Sigma^T_{j=1}[(\Sigma_{i\in I_j}g_i)w_j+\frac12 (\Sigma_{i\in I_j}h_i+\lambda)w_j^2]+\gamma T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=\Sigma^T_{j=1}[(\Sigma_{i\in I_j}g_i)w_j+\frac12 (\Sigma_{i\in I_j}h_i+\lambda)w_j^2]+\gamma T&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=\Sigma^T_{j=1}[G_j w_j+\frac12 (H_j+\lambda)w_j^2]+\gamma T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=\Sigma^T_{j=1}[G_j w_j+\frac12 (H_j+\lambda)w_j^2]+\gamma T&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(常量标红)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;=\Sigma^T_{j=1}[\color{red}{G_j} w_j+\color{red}{\frac12 (H_j+\lambda)}w_j^2]+\gamma T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=\Sigma^T_{j=1}[\color{red}{G_j} w_j+\color{red}{\frac12 (H_j+\lambda)}w_j^2]+\gamma T&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上式变成一个关于&lt;span class=&quot;MathJax_Preview&quot;&gt;w_j&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;w_j&lt;/script&gt;(叶子得分)的一元二次函数。&lt;/p&gt;

&lt;p&gt;翻开初中数学课本你就知道，一元二次函数取极值时：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自变量取&lt;span class=&quot;MathJax_Preview&quot;&gt;\arg \min_x (Gx+\frac12 Hx^2)=-\frac{G}{H},H&amp;gt;0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\arg \min_x (Gx+\frac12 Hx^2)=-\frac{G}{H},H&gt;0&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;因变量取&lt;span class=&quot;MathJax_Preview&quot;&gt;\min_x(Gx+\frac12 Hx^2)=-\frac12 \frac{G^2}{H}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\min_x(Gx+\frac12 Hx^2)=-\frac12 \frac{G^2}{H}&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对应地，想要&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;函数取到最小值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个叶子的得分&lt;span class=&quot;MathJax_Preview&quot;&gt;w^*_j=-\frac{G_j}{H_j+\lambda}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;w^*_j=-\frac{G_j}{H_j+\lambda}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;对应的唯一最小目标函数值&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj=-\frac12 \Sigma^T_{j=1}\frac{G_j^2}{H_j+\lambda}+\gamma T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj=-\frac12 \Sigma^T_{j=1}\frac{G_j^2}{H_j+\lambda}+\gamma T&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/xgboostPic/QQ20161020-0.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，问题2、3也被解决✅&lt;/p&gt;

&lt;p&gt;最后，就像前面所说的，通过&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;改变节点上用于分叉的特征&lt;/li&gt;
  &lt;li&gt;改变特征的阈值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一遍遍尝试分叉的可能性，看看哪种树的形态可以算出最低的&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj^{(t)}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj^{(t)}&lt;/script&gt;。如果&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;函数没法降低，那么就可以停止分叉，开始下一轮迭代了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;xgboost-1&quot;&gt;三、从最简单的决策树到XGBoost的过程&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;标📍处请重点阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-5&quot;&gt;1.决策树&lt;/h3&gt;

&lt;h4 id=&quot;section-6&quot;&gt;简介&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;决策树是一类算法的基类，是一种非参监督式学习模型。&lt;/li&gt;
  &lt;li&gt;它既可以应用于分类问题，也可以应用于回归问题。&lt;/li&gt;
  &lt;li&gt;它的目标是基于数据属性找到决定性规则，预测目标值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;决策树的特点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;优点：
    &lt;ul&gt;
      &lt;li&gt;模型解释性好&lt;/li&gt;
      &lt;li&gt;训练需要的数据少&lt;/li&gt;
      &lt;li&gt;回归和分类问题都可以处理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点：
    &lt;ul&gt;
      &lt;li&gt;偏差-方差的tradeoff倾向于偏差，所以模型很容易过度拟合而且不稳定。&lt;/li&gt;
      &lt;li&gt;寻找最优决策树被证明为 NP-complete 问题，所以找到的是局部而不是全局最优（事实上贪心法往往都找不出最优解）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是随着研究深入，过度拟合的问题已经通过&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;与Boosting结合构成Boosted tree&lt;/li&gt;
      &lt;li&gt;与ensemble learning(如随机森林)结合&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;被攻克。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;id3&quot;&gt;📍1.(1) 典型的决策树：ID3(迭代二叉树)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;引入概念：熵(entropy)
    &lt;ul&gt;
      &lt;li&gt;给定一组数据集S，每个数据给一个标签，可以分到class&lt;span class=&quot;MathJax_Preview&quot;&gt;_1&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;_1&lt;/script&gt;到class&lt;span class=&quot;MathJax_Preview&quot;&gt;_n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;_n&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;class&lt;span class=&quot;MathJax_Preview&quot;&gt;_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;_i&lt;/script&gt;所占的比例是&lt;span class=&quot;MathJax_Preview&quot;&gt;p_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;p_i&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;定义熵为&lt;span class=&quot;MathJax_Preview&quot;&gt;H(s)=-(p_1log_2p_1+p_2log_2p_2+\cdots+p_nlog_2p_n)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;H(s)=-(p_1log_2p_1+p_2log_2p_2+\cdots+p_nlog_2p_n)&lt;/script&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;熵的意义
    &lt;ul&gt;
      &lt;li&gt;热力学中，熵越大意味着混乱程度越大&lt;/li&gt;
      &lt;li&gt;统计学中，熵越大意味着不确定性越大&lt;/li&gt;
      &lt;li&gt;我们希望一个数据集S的不确定性越小越好&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;f(p)=-plog(p)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(p)=-plog(p)&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/xgboostPic/198011-5a63c41a760506c7.png&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据点分布在 &lt;span class=&quot;MathJax_Preview&quot;&gt;p\to 0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;p\to 0&lt;/script&gt; or &lt;span class=&quot;MathJax_Preview&quot;&gt;p\to 1&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;p\to 1&lt;/script&gt;的极端，那这个规则可信&lt;/li&gt;
  &lt;li&gt;如果数据点分散不集中，则这个规则很有可能是错的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是我们得到了ID3的训练原理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据特征依次寻找分割的条件，使分割后的各&lt;span class=&quot;MathJax_Preview&quot;&gt;S_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S_i&lt;/script&gt;的熵总和最小&lt;/li&gt;
  &lt;li&gt;即最小化&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;H=q_1H(s_1)+q_2H(s_2)+\cdots+q_nH(s_n)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;H=q_1H(s_1)+q_2H(s_2)+\cdots+q_nH(s_n)&lt;/script&gt;

&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;q_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;q_i&lt;/script&gt;是&lt;span class=&quot;MathJax_Preview&quot;&gt;s_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;s_i&lt;/script&gt;的权重&lt;/p&gt;

&lt;p&gt;有的地方介绍ID3是讲最大化信息增益，而不是最小化熵&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;事实上这两种说法是一样的。&lt;/li&gt;
  &lt;li&gt;因为Information gain &lt;span class=&quot;MathJax_Preview&quot;&gt;=&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;=&lt;/script&gt; entropy&lt;span class=&quot;MathJax_Preview&quot;&gt;_{bfr}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;_{bfr}&lt;/script&gt; &lt;span class=&quot;MathJax_Preview&quot;&gt;-&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;-&lt;/script&gt; entropy&lt;span class=&quot;MathJax_Preview&quot;&gt;_{aft}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;_{aft}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;后者是下一个特征要考虑的问题，而从熵的角度看只是对于每一个特征的贪心算法，按上一个特征分已经求出一个定的entropy&lt;span class=&quot;MathJax_Preview&quot;&gt;_{bfr}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;_{bfr}&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;cart&quot;&gt;1.(2) 传统CART决策树&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;CART = Classification And Regression Tree&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CART与ID3的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CART中选用变量的不纯性度量是GINI指数
    &lt;ul&gt;
      &lt;li&gt;如果做一个分类问题，且含有两个以上的类别，则CART算法把目标类合并成两个超类&lt;/li&gt;
      &lt;li&gt;如果做一个回归问题，则CART算法找出一组基于树的回归方程来预测目标变量&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GINI指数：
    &lt;ul&gt;
      &lt;li&gt;是介于0~1之间的数，0-&amp;gt;完全相等，1-&amp;gt;完全不相等；&lt;/li&gt;
      &lt;li&gt;总体内包含的类别越杂乱，GINI指数就越大（跟熵的概念很相似）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;I_G(f)=\Sigma_{i=1}^mf_i(1-f_i)=\Sigma_{i=1}^m(f_i-f_i^2)=1-\Sigma_{i=1}^mf_i^2&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;I_G(f)=\Sigma_{i=1}^mf_i(1-f_i)=\Sigma_{i=1}^m(f_i-f_i^2)=1-\Sigma_{i=1}^mf_i^2&lt;/script&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-8&quot;&gt;📍📍📍1.(3) 回归树&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;此部分内容来自CMU的讲义&lt;a href=&quot;http://www.stat.cmu.edu/~cshalizi/350-2006/lecture-10.pdf&quot; target=&quot;_blank&quot;&gt; Lecture 10: Regression Trees &lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;此处的回归树比上面的CART更接近于XGBoost中的”CART”基分类器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上图中通过两个特征将一堆车分到六个叶子上，每个叶子有自己的得分。&lt;/p&gt;

&lt;p&gt;这里的回归树与XGBoost基分类器的区别在于&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;叶子上的得分：
    &lt;ul&gt;
      &lt;li&gt;回归树上的叶子得分是叶子上所有样本的目标值的均值&lt;/li&gt;
      &lt;li&gt;XGBoost的基分类器中叶子得分是通过梯度下降计算出来的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分叉的评判依据：
    &lt;ul&gt;
      &lt;li&gt;回归树中，树&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;的评判标准是平方误差&lt;span class=&quot;MathJax_Preview&quot;&gt;S=\Sigma_{c\in leaves(T)}\Sigma_{i\in c}(y_i-m_c)^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S=\Sigma_{c\in leaves(T)}\Sigma_{i\in c}(y_i-m_c)^2&lt;/script&gt;
        &lt;ul&gt;
          &lt;li&gt;想法是“让同一个叶子中的样本的差距尽量小”&lt;/li&gt;
          &lt;li&gt;然后对于一个节点尝试不同的分叉方法使&lt;span class=&quot;MathJax_Preview&quot;&gt;S&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;最小&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;XGBoost基分类器中，树&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;的评判标准是&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj(\theta)=L(\theta)+\Omega(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj(\theta)=L(\theta)+\Omega(\theta)&lt;/script&gt;
        &lt;ul&gt;
          &lt;li&gt;想法是“这棵树在Boosting过程中让预测值与真实值尽量接近（的同时结构不要太复杂）”&lt;/li&gt;
          &lt;li&gt;不管一个叶子里样本的差距大不大，只管让预测值在梯度方向上接近真实值就够了，可以说是更直接的一种想法&lt;/li&gt;
          &lt;li&gt;然后对于一个节点尝试不同的分叉方法使&lt;span class=&quot;MathJax_Preview&quot;&gt;Obj&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;Obj&lt;/script&gt;最小&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-9&quot;&gt;2.随机森林&lt;/h3&gt;

&lt;h4 id=&quot;baggingboostrap-aggregating&quot;&gt;Bagging(Boostrap Aggregating)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;有放回的随机抽样用于训练&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;训练步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果训练集大小为N，则对于每棵树，&lt;em&gt;随机且有放回地&lt;/em&gt;从训练集里取n个训练样本（行采样）&lt;/li&gt;
  &lt;li&gt;如果每个样本的特征维度是M，则指定一个常数m远小于M，&lt;em&gt;随机&lt;/em&gt;从M个特征里选m个特征子集，每次树进行分裂的时候，从这m个子集中选择最优的（列采样）&lt;/li&gt;
  &lt;li&gt;每棵树都最大程度生长，不剪枝&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一开始我们提到的随机森林中的“随机”就是指的这里的两个随机性。由于它们的引入，使得随机森林不容易陷入过拟合，并且具有很好得抗噪能力。&lt;/p&gt;

&lt;p&gt;关键问题是如何选择最优的m（或者是范围），这也是&lt;em&gt;随机森林唯一的一个参数&lt;/em&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;随机森林算法简单解释&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;按这种算法得到的随机森林中的每一棵都是很弱的，但是大家组合起来就很厉害了。&lt;/li&gt;
  &lt;li&gt;每一棵决策树就是一个精通于某一个窄领域的专家（因为我们从M个特征中选择m个让每一棵决策树进行学习），这样在随机森林中就有了很多个精通不同领域的专家。&lt;/li&gt;
  &lt;li&gt;对一个新的问题（输入样本），可以用不同的角度去看待它，最终由各个专家，投票得到结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;gradient-boosting-&quot;&gt;📍3.Gradient Boosting 梯度提升&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Gradient boosting的思想是迭代生多个弱的模型，然后将每个弱模型的预测结果相加。⚠️–&amp;gt;“核心思想是减小残差”。&lt;/li&gt;
  &lt;li&gt;后面模型&lt;span class=&quot;MathJax_Preview&quot;&gt;f_{m}(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f_{m}(x)&lt;/script&gt;基于前面学习模型的&lt;span class=&quot;MathJax_Preview&quot;&gt;f_{m-1}(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f_{m-1}(x)&lt;/script&gt;的效果生成:&lt;span class=&quot;MathJax_Preview&quot;&gt;f_{m}(x) = f_{m-1}(x) + h(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f_{m}(x) = f_{m-1}(x) + h(x)&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;如何找这个&lt;span class=&quot;MathJax_Preview&quot;&gt;h(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;h(x)&lt;/script&gt;？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最理想的&lt;span class=&quot;MathJax_Preview&quot;&gt;h(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;h(x)&lt;/script&gt;应该是能够完全拟合&lt;span class=&quot;MathJax_Preview&quot;&gt;y-f_{m-1}(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y-f_{m-1}(x)&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;这就是我们常说的基于残差的学习&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于回归问题&lt;span class=&quot;MathJax_Preview&quot;&gt;\frac12 (y-f(x))^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac12 (y-f(x))^2&lt;/script&gt;残差和负梯度是相同的&lt;/li&gt;
  &lt;li&gt;损失函数&lt;span class=&quot;MathJax_Preview&quot;&gt;L(y,f)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;L(y,f)&lt;/script&gt;中的&lt;span class=&quot;MathJax_Preview&quot;&gt;f&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;不是传统意义上的函数，而是函数向量&lt;span class=&quot;MathJax_Preview&quot;&gt;[f(x_1),\cdots,f(x_n)]&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;[f(x_1),\cdots,f(x_n)]&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;因此基于损失函数的函数空间的负梯度的学习也称为“伪残差”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;gb&quot;&gt;GB算法的步骤&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;初始化模型&lt;span class=&quot;MathJax_Preview&quot;&gt;f_0(x)=argmin_{\gamma}\Sigma_{i=1}^nL(y_i,\gamma)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f_0(x)=argmin_{\gamma}\Sigma_{i=1}^nL(y_i,\gamma)&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行循环&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;计算伪残差&lt;span class=&quot;MathJax_Preview&quot;&gt;r_{im}=-[\frac{\partial L(y_i,f(x_i))}{\partial f(x_i)}]_{f(x)=f_{m-1}(x)},i=1,2,\cdots,n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;r_{im}=-[\frac{\partial L(y_i,f(x_i))}{\partial f(x_i)}]_{f(x)=f_{m-1}(x)},i=1,2,\cdots,n&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;基于&lt;span class=&quot;MathJax_Preview&quot;&gt;\{(x_i,r_{im})\}^n_{i=1}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\{(x_i,r_{im})\}^n_{i=1}&lt;/script&gt;生成基学习器&lt;span class=&quot;MathJax_Preview&quot;&gt;h_m(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;h_m(x)&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;计算最优的&lt;span class=&quot;MathJax_Preview&quot;&gt;\gamma_m=argmin_{\gamma}\Sigma_{i=1}^nL(y_i,f_{m-1}(x_i)+\gamma h_m(x_i))&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\gamma_m=argmin_{\gamma}\Sigma_{i=1}^nL(y_i,f_{m-1}(x_i)+\gamma h_m(x_i))&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;更新模型&lt;span class=&quot;MathJax_Preview&quot;&gt;f_m(x)=f_{m-1}(x)+\gamma_mh_m(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f_m(x)=f_{m-1}(x)+\gamma_mh_m(x)&lt;/script&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;gbdt-&quot;&gt;4.GBDT 梯度提升决策树&lt;/h3&gt;

&lt;p&gt;别名：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MART (Multiple Additive Regression Tree)&lt;/li&gt;
  &lt;li&gt;GBRT (Gradient Boost Regression Tree)&lt;/li&gt;
  &lt;li&gt;Tree Net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在我看来，GBDT已经是80%XGBoost的样子了。整个Boosted tree的概念是建立在将Boosting中每一步加的那一个函数&lt;span class=&quot;MathJax_Preview&quot;&gt;h(x)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;h(x)&lt;/script&gt;映射成一棵决策树&lt;span class=&quot;MathJax_Preview&quot;&gt;T&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;。理论上这是完全可行的，因为GBDT的基学习器–回归树–本质上就是每一个输入样本可以对应一个输出值（叶子得分），这与函数的概念完全吻合。&lt;/p&gt;

&lt;p&gt;当谈到Boosted tree的基学习器回归树，Tianqi Chen如是说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有人可能会问它和decision tree的关系，其实我们可以简单地把它理解为decision tree的一个扩展。从简单的类标到分数之后，我们可以做很多事情，如概率预测，排序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GBDT中的决策树是个弱模型，深度较小一般不会超过5，叶子节点的数量也不会超过10，对于生成的每棵决策树乘上比较小的缩减系数（学习率&amp;lt;0.1），有些GBDT的实现加入了随机抽样（subsample 0.5&amp;lt;=f &amp;lt;=0.8）提高模型的泛化能力。通过交叉验证的方法选择最优的参数。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;xgboost-2&quot;&gt;四、XGBoost的一些思考&lt;/h2&gt;

&lt;h3 id=&quot;xgboostgbdt&quot;&gt;XGBoost建立在GBDT的基础上&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;传统GBDT以CART作为基分类器，xgboost还支持线性分类器，这个时候xgboost相当于带L1和L2正则化项的逻辑斯蒂回归（分类问题）或者线性回归（回归问题）&lt;/li&gt;
  &lt;li&gt;传统GBDT在优化时只用到一阶导数信息，xgboost则对代价函数进行了二阶泰勒展开，同时用到了一阶和二阶导数，这样做的好处是收敛更快&lt;/li&gt;
  &lt;li&gt;xgboost在代价函数里加入了正则项，用于控制模型的复杂度。正则项里包含了树的叶子节点个数、每个叶子节点上输出的score的L2模的平方和。从Bias-variance tradeoff角度来讲，正则项降低了模型的variance，使学习出来的模型更加简单，防止过拟合&lt;/li&gt;
  &lt;li&gt;Shrinkage（缩减）。xgboost在进行完一次迭代后，会将叶子节点的权重乘上该系数，主要是为了削弱每棵树的影响，让后面有更大的学习空间。实际应用中，一般把eta设置得小一点，然后迭代次数设置得大一点。&lt;/li&gt;
  &lt;li&gt;列抽样（column subsampling）。xgboost借鉴了随机森林的做法，支持列抽样，不仅能降低过拟合，还能减少计算，这也是xgboost异于传统gbdt的一个特性。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;xgboost-3&quot;&gt;XGBoost的优化&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在寻找最佳分割点时，考虑传统的枚举每个特征的所有可能分割点的贪心法效率太低，xgboost实现了一种近似的算法。大致的思想是根据百分位法列举几个可能成为分割点的候选者，然后从候选者中根据上面求分割点的公式计算找出最佳的分割点。&lt;/li&gt;
  &lt;li&gt;xgboost考虑了训练数据为稀疏值的情况，可以为缺失值或者指定的值指定分支的默认方向，这能大大提升算法的效率，paper中讲到可以提到50倍。&lt;/li&gt;
  &lt;li&gt;特征列排序后以块的形式存储在内存中，在迭代中可以重复使用；虽然boosting算法迭代必须串行，但是在处理每个特征列时可以做到并行。&lt;/li&gt;
  &lt;li&gt;xgboost 还考虑了当数据量比较大，内存不够时怎么有效的使用磁盘，主要是结合多线程、数据压缩、分片的方法，尽可能的提高算法的效率。&lt;/li&gt;
  &lt;li&gt;按照特征列方式存储能优化寻找最佳的分割点，但是当以行计算梯度数据时会导致内存的不连续访问，严重时会导致cache miss，降低算法效率。paper中提到，可先将数据收集到线程内部的buffer，然后再计算，提高算法的效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;xgboostcart&quot;&gt;还有一个问题：xgboost代价函数里加入正则项，是否优于cart的剪枝？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;决策树的构建，从所有决策树中找出最佳的决策树，是NP-complete问题&lt;/li&gt;
  &lt;li&gt;所以常常采用启发式的方法，比如CART里优化GINI指数、剪枝、控制树的深度&lt;/li&gt;
  &lt;li&gt;这些启发式方法的背后往往隐含了一个目标函数，但是在XGBoost之前没有人提到这个问题&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;Gain=\Delta Obj = \frac12 [\color{red}{\frac{G_L^2}{H_L+\lambda}} + \color{aqua}{\frac{G_R^2}{H_R+\lambda}} - \color{blue}{\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}}] - \lambda&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Gain=\Delta Obj = \frac12 [\color{red}{\frac{G_L^2}{H_L+\lambda}} + \color{aqua}{\frac{G_R^2}{H_R+\lambda}} - \color{blue}{\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}}] - \lambda&lt;/script&gt;

&lt;p&gt;这个公式形式上跟ID3算法（entropy计算增益）、CART算法（GINI指数计算增益）是一致的，都是用分裂后的某种值 减去 分裂前的某种值，从而得到增益。为了限制树的生长，我们可以加入阈值，当增益大于阈值时才让节点分裂，上式中的gamma即阈值，它是正则项里叶子节点数T的系数，所以xgboost在优化目标函数的同时相当于做了预剪枝。另外，上式中还有一个系数lambda，是正则项里叶子得分的L2模平方的系数，对leaf score做了平滑，也起到了防止过拟合的作用，这个是传统GBDT里不具备的特性。&lt;/p&gt;

&lt;p&gt;详细的比较可以参考下面这个表。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;目标式&lt;/td&gt;
      &lt;td&gt;启发式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;信息增益&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;训练损失&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;剪枝&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;根据节点数进行正则化&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;最大深度&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;函数域的限制&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;叶子值的平滑&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;叶子权重的L2正则化&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>机器学习中的神经网络-笔记(1)</title>
   <link href="http://puxuan.coding.me//2016/10/28/nnfml1/"/>
   <updated>2016-10-28T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/10/28/nnfml1</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;机器学习中的神经网络-笔记(1)&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;1.神经网络结构的种类&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;前驱神经网络
    &lt;ul&gt;
      &lt;li&gt;实际应用中最普遍的神经网络
        &lt;ul&gt;
          &lt;li&gt;超过一层隐含层就被称为“深度”神经网络&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;计算一系列改变样例间相似性的变换
        &lt;ul&gt;
          &lt;li&gt;每一层神经元的活动是下面一层（之前一层）神经元活动的非线性函数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;循环神经网络
    &lt;ul&gt;
      &lt;li&gt;比前驱神经网络更加强大&lt;/li&gt;
      &lt;li&gt;连接图中含有 &lt;strong&gt;有向环&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;有很复杂的动态，导致很难训练&lt;/li&gt;
      &lt;li&gt;更符合生物学理论&lt;/li&gt;
      &lt;li&gt;很适用于序列数据&lt;/li&gt;
      &lt;li&gt;可以在隐藏状态中记住信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/neural/QQ20161028-0.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对称连通网络
    &lt;ul&gt;
      &lt;li&gt;类似循环神经网络，但是神经元之间的连接是对称的
        &lt;ul&gt;
          &lt;li&gt;比循环神经网络更好分析&lt;/li&gt;
          &lt;li&gt;也限制了它的功能，因为违背了能量函数（比如无法对环建模）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2.感知器&lt;/h2&gt;
&lt;p&gt;感知器是一个模式识别系统的特例。感知器的学习过程现在仍然被应用于含有巨大数目特征的任务中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/neural/QQ20161028-1.png&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;决策单元&lt;/h3&gt;

&lt;p&gt;决策单元中的threshold相当于一个负偏差(bias)，而一个负偏差相当于一个输入为常数1，再在它身上加上权重&lt;span class=&quot;MathJax_Preview&quot;&gt;b&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;（与此同时输入&lt;span class=&quot;MathJax_Preview&quot;&gt;x_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt;的权重是&lt;span class=&quot;MathJax_Preview&quot;&gt;w_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;w_i&lt;/script&gt;）。这样一来我们学偏差就跟学权重没区别了，不需要再去为权重创造一条规则。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/neural/QQ20161028-2.png&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;感知器的收敛过程（分类器）&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;输入向量里加一个1，然后不用管threshold了。&lt;/li&gt;
  &lt;li&gt;选取一种数据选择的策略，只要保证每个数据都会被选到就行。
    &lt;ul&gt;
      &lt;li&gt;输出是对的：保持权重不要变&lt;/li&gt;
      &lt;li&gt;应该是0结果输出是1：把输入向量加到权重向量上去&lt;/li&gt;
      &lt;li&gt;应该是1结果输出是0：从权重向量上减去输入向量&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上过程保证可以为所有训练数据找到输出正确结果的权重，前提是这样的一组权重真正存在。事实上很多情况下这种权重是不存在的，取决于你使用的什么特征。所以很多问题的关键在于使用正确的特征。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;3.从几何角度看感知器&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;从13维到14维创造出的复杂度与从2维到3维没有区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-6&quot;&gt;权重空间&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;每一个权重对应一维&lt;/li&gt;
  &lt;li&gt;空间中的一个点代表&lt;strong&gt;所有&lt;/strong&gt;权值的某种设定&lt;/li&gt;
  &lt;li&gt;不考虑阀值的情况下，每一组训练实例都可以表示为权重空间里穿过原点的一个超平面
    &lt;ul&gt;
      &lt;li&gt;weights –&amp;gt; point&lt;/li&gt;
      &lt;li&gt;training case –&amp;gt; hyper-plane&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在超平面的一边的所有权重都会得到一样的答案&lt;/li&gt;
&lt;/ul&gt;

&lt;image src=&quot;/public/img/neural/QQ20161028-3.png&quot; width=&quot;30%&quot; /&gt;

&lt;p&gt;在这个2维图里，训练实例就是那个一个平面。它和 给出positive的输入向量是垂直的。&lt;/p&gt;

&lt;p&gt;现在蓝色向量输出是1，绿线和蓝线的数量积是正的，所以也会给出1的输出；如果权重取红色线那样的向量，则会给出0的输出，结果错误。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意⚠️：这不代表权重都必须和蓝线在同一边！只是这里的蓝线输入为1而已。下图中蓝线输出为0，那么正确的权重应该与蓝线在超平面的不同侧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;image src=&quot;/public/img/neural/QQ20161028-4.png&quot; width=&quot;30%&quot; /&gt;

&lt;p&gt;输入（训练实例）把权重空间分成两部分，一面的所有权重给出正确答案，另一面给出错误答案。换句话说，输入向量“限制” 了权重。&lt;/p&gt;

&lt;image src=&quot;/public/img/neural/QQ20161028-5.png&quot; width=&quot;30%&quot; /&gt;

&lt;p&gt;同时有两个输入（两组数据）的时候，会出现一种如上图所示的锥形结构，相当于给权重空间加了两重限制。要使所有&lt;span class=&quot;MathJax_Preview&quot;&gt;n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个输入都得到正确的结果，就需要找落在&lt;span class=&quot;MathJax_Preview&quot;&gt;n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个所有超平面的正确的那一边的点。这个点很有可能是不存在的，如果存在这样的权重向量，那它一定在一个“超锥”(hyper-cone)中，且顶点在原点上。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;4.感知器的工作原理&lt;/h2&gt;

&lt;image src=&quot;/public/img/neural/QQ20161028-6.png&quot; width=&quot;30%&quot; /&gt;

&lt;p&gt;假设存在一个权重满足所有输入，设它为可行向量，在图中表现为绿色。&lt;/p&gt;

&lt;p&gt;最开始的想法是：每次权重落在错误的一边，也就是犯一次错，这个权重就去更新一次，使得他和可行向量的距离拉近，这里的距离指的是欧几里得距离。&lt;/p&gt;

&lt;p&gt;但是有一个问题。如果说由图中的红色点移动到黄色点，那么通过犯一次错可以把错误的输出纠正成正确的输出，但是按照之前的想法，黄色点与可行向量的欧几里得距离事实上更大了，也就是更远了！不满足我们之前的预期，所以之前的想法有些问题。&lt;/p&gt;

&lt;image src=&quot;/public/img/neural/QQ20161028-7.png&quot; width=&quot;30%&quot; /&gt;

&lt;p&gt;再考虑一个“大致可行”的权重向量。“大致可行”的范围是：要把错的结果纠正成对的，而且可行区域至少要有蓝色输入向量那么长。现在的我们可以说：感知器每犯一次错，到“大致可行”的向量的欧几里得距离总在下降，且至少下降了&lt;span class=&quot;MathJax_Preview&quot;&gt;\mid \vec {upd} \mid ^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mid \vec {upd} \mid ^2&lt;/script&gt;这么多。&lt;span class=&quot;MathJax_Preview&quot;&gt;\vec {upd}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\vec {upd}&lt;/script&gt;是更新向量，即原来点指向新点。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意⚠️：这些假设的前提都是可行向量存在；事实上可行向量有可能不存在。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-8&quot;&gt;5.感知器的局限性&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;要是能手动选特征，而且有足够特征，那感知器基本可以做任何事情
    &lt;ul&gt;
      &lt;li&gt;很可惜这样会把人累死😂&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;二元阀值输出单元甚至无法判断两个位特征是否相同
    &lt;ul&gt;
      &lt;li&gt;要求：(1,1) or (0,0)输出1；(1,0) or (0,1)输出0&lt;/li&gt;
      &lt;li&gt;可惜二元阀值输出单元搞不定这个问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;image src=&quot;/public/img/neural/QQ20161028-8.png&quot; width=&quot;30%&quot; /&gt;

&lt;ul&gt;
  &lt;li&gt;没有隐含层的神经网络在将输入映射到输出的过程中很有局限性
    &lt;ul&gt;
      &lt;li&gt;多层的线性单元没有什么用，因为合起来还是线性的&lt;/li&gt;
      &lt;li&gt;需要多层可适应的(adapative)、非线性的隐含单元。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Calvin Harris - My Way (Puxuan Remix)</title>
   <link href="http://puxuan.coding.me//2016/10/20/my-way/"/>
   <updated>2016-10-20T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/10/20/my-way</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/audios/myway.png&quot; width=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;没错，传说中的五毛特效😃。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;正曲&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;整个曲子做下来大概花了一个月。距离「上一曲」&lt;a href=&quot;http://puxuan.me/2016/07/29/summer/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Summer&lt;/code&gt;&lt;/a&gt;中间其实还做了两首别的，但是做完一段时间觉得不好听又删掉了😂。果然耐听还是得CH。&lt;/p&gt;

&lt;p&gt;这首曲子做起来比较慌，因为是第一次把新曲子拿来remix，想跟一起做remix的大神们相互切磋一下，比如&lt;a href=&quot;https://soundcloud.com/shadowanthem/calvin-harris-my-way-stvcks-remix&quot; target=&quot;_blank&quot;&gt; Calvin Harris - My way (STVCKS Remix) &lt;/a&gt; 这首我就是很服的。&lt;/p&gt;

&lt;p&gt;总而言之，很有意思的一段经历，希望能听到的人能够喜欢！&lt;/p&gt;

&lt;div id=&quot;amazingaudioplayer-1&quot; style=&quot;display:block;position:relative;width:300px;height:164px;margin:0px auto 0px;&quot;&gt;
        &lt;ul class=&quot;amazingaudioplayer-audios&quot; style=&quot;display:none;&quot;&gt;
            &lt;li data-artist=&quot;Puxuan / Calvin Harris&quot; data-title=&quot;Calvin Harris - My Way (Puxuan Remix)&quot; data-album=&quot;&quot; data-info=&quot;&quot; data-image=&quot;/public/audios/mywaysmall.png&quot; data-duration=&quot;162&quot;&gt;
                &lt;div class=&quot;amazingaudioplayer-source&quot; data-src=&quot;/public/audios/my_way.mp3&quot; data-type=&quot;audio/mpeg&quot; /&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;div class=&quot;amazingaudioplayer-engine&quot;&gt;&lt;a href=&quot;http://amazingaudioplayer.com&quot; title=&quot;music player for website&quot;&gt;jquery mp3 player&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这里是原曲：&lt;a href=&quot;http://v.youku.com/v_show/id_XMTc3Nzg4NzY4NA==.html?from=s1.8-1-1.2&amp;amp;spm=a2h0k.8191407.0.0&quot; target=&quot;_blank&quot;&gt; 传送门 &lt;/a&gt;，可以对比感受一下。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java位运算实现四则运算</title>
   <link href="http://puxuan.coding.me//2016/08/16/java-bit/"/>
   <updated>2016-08-16T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/08/16/java-bit</id>
   <content type="html">&lt;p&gt;一直以来对位运算不熟悉，最近做到 leetcode 里 easy 模式（捂脸）的 &lt;a href=&quot;https://leetcode.com/problems/sum-of-two-integers/&quot;&gt; sum of two integers &lt;/a&gt;，感觉没头绪。所以好好学习了一下JAVA里的位运算。&lt;/p&gt;

&lt;h2 id=&quot;add&quot;&gt;Add&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.&lt;/p&gt;

  &lt;p&gt;Example: Given a = 1 and b = 2, return 3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先从这个题说起。&lt;/p&gt;

&lt;p&gt;比如说 5 + 17， 转换为二进制分别是 &lt;span class=&quot;MathJax_Preview&quot;&gt;101_{[2]}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;101_{[2]}&lt;/script&gt; 和 &lt;span class=&quot;MathJax_Preview&quot;&gt;10001_{[2]}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;10001_{[2]}&lt;/script&gt;，直接相加不进位，结果是 &lt;span class=&quot;MathJax_Preview&quot;&gt;10100_{[2]} = 20_{[10]}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;10100_{[2]} = 20_{[10]}&lt;/script&gt;。如果只算进位的话，结果是 &lt;span class=&quot;MathJax_Preview&quot;&gt;10_{[2]} = 2_{[10]}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;10_{[2]} = 2_{[10]}&lt;/script&gt;。结果是正确的，证明我们的思路可行。那么怎么用位运算实现二进制的运算呢？&lt;/p&gt;

&lt;p&gt;算和不带进位的时候，0与1，1与0都会得到1，1与1，0与0都会得到0，这是典型的异或(XOR)运算，在 JAVA 中用 “^” 符号来表示。这样一来，&lt;code class=&quot;highlighter-rouge&quot;&gt;sum = a ^ b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;算进位的时候，只有1与1会产生1，其他都会产生0，这是典型的位与运算，并且往左移一位。所以&lt;code class=&quot;highlighter-rouge&quot;&gt;carry = a &amp;amp; b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;所以采用递归我们可以写出代码。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    		
    	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也可以很简单的改写成非递归。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sub&quot;&gt;Sub&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;计算机内的减法采用补码减法。&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;(x-y)_C = x_C - y_C = x_C + (-y)_C&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;(x-y)_C = x_C - y_C = x_C + (-y)_C&lt;/script&gt;

&lt;p&gt;而取补码是用“求反并在最末尾加1”实现的。所以我们实现减法。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mul&quot;&gt;Mul&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;这个很简单了，先看看 b 的末位是不是1，是的话就加上 a，然后 a 左移，b 右移。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;div&quot;&gt;Div&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;除法事实上就是乘法倒过来。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Calvin Harris - Summer (Puxuan Remix)</title>
   <link href="http://puxuan.coding.me//2016/07/29/summer/"/>
   <updated>2016-07-29T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/07/29/summer</id>
   <content type="html">&lt;h2 id=&quot;remix-&quot;&gt;为什么要 remix 这首歌？&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;我听 Calvin Harris 竟然已经有7年了。&lt;/p&gt;

&lt;p&gt;13岁的我躺在床上，睡不着就用 mp3 听流行歌，那是十分深刻的记忆。细细数来，现在还在听的只剩 Harris 了。他为我打开了电音世界的大门。当时听的曲子 &lt;em&gt;I created disco&lt;/em&gt;, &lt;em&gt;Acceptable in the 80s&lt;/em&gt;，再到后来的 &lt;em&gt;Feel so close&lt;/em&gt;, &lt;em&gt;We’ll be coming back&lt;/em&gt;, &lt;em&gt;Let’s go&lt;/em&gt;，再到现在的 &lt;em&gt;This is what you came for&lt;/em&gt;, &lt;em&gt;Thinking about you&lt;/em&gt; 等等，他的作品从来没有让我失望。&lt;/p&gt;

&lt;p&gt;当我开始自己尝试做 remix 的时候，我更发现 Harris 是一个令人尊重的艺术家。他是我目前知道的唯一一个把人声音轨放出，鼓励大家再创作的 DJ。所以做这首曲子，有向 Harris 致敬的成分在里面。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;时间&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;从2015年4月开始，做到8月中断了一段时间。然后今年夏天在学校这边做实验，用空余的时间接着把这曲子做完。所以说时间跨度大概是16个月，真正花了3-4个月。&lt;/p&gt;

&lt;p&gt;还有一个因素就是 Logic pro 用的不是很熟，后来换了 Ableton Live 效率才提高不少。毕竟一个人做&lt;span class=&quot;MathJax_Preview&quot;&gt;n&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个人的工作，时间差不多是别人的&lt;span class=&quot;MathJax_Preview&quot;&gt;n^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;n^2&lt;/script&gt;倍吧。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;回归主题：正曲&lt;/h2&gt;
&lt;hr /&gt;

&lt;div id=&quot;amazingaudioplayer-1&quot; style=&quot;display:block;position:relative;width:300px;height:164px;margin:0px auto 0px;&quot;&gt;
        &lt;ul class=&quot;amazingaudioplayer-audios&quot; style=&quot;display:none;&quot;&gt;
            &lt;li data-artist=&quot;Puxuan / Calvin Harris&quot; data-title=&quot;Calvin Harris - Summer (Puxuan Remix)&quot; data-album=&quot;&quot; data-info=&quot;&quot; data-image=&quot;/public/audios/img_0816.png&quot; data-duration=&quot;199&quot;&gt;
                &lt;div class=&quot;amazingaudioplayer-source&quot; data-src=&quot;/public/audios/calvin harris - summer (puxuan remix).mp3&quot; data-type=&quot;audio/mpeg&quot; /&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;div class=&quot;amazingaudioplayer-engine&quot;&gt;&lt;a href=&quot;http://amazingaudioplayer.com&quot; title=&quot;music player for website&quot;&gt;jquery mp3 player&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
【手机加载偏慢，大概需要10-20秒。】&lt;/p&gt;

&lt;p&gt;其实这曲子不是典型意义上的 remix，因为我看大家对本身已经是电音的曲子再 remix 的时候只是把乐器、节奏调整了一下，旋律没换。我是按照 remix 非电音的模式来做的这首，主旋律是自己写的，所以工作量还是蛮大的。尤其是对于我这种一度不识五线谱和乐理的退役鼓手来说，写鼓谱不在话下，但是写旋律真是（手动微笑）。&lt;/p&gt;

&lt;p&gt;这里是 Harris 本人的原曲：&lt;a href=&quot;http://v.youku.com/v_show/id_XNzIwOTc2ODU2.html?from=s1.8-1-1.2&quot; target=&quot;_blank&quot;&gt; 传送门 &lt;/a&gt;，可以对比感受一下。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>深度学习：从入门到放弃</title>
   <link href="http://puxuan.coding.me//2016/07/20/deep-learning/"/>
   <updated>2016-07-20T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/07/20/deep-learning</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;深度学习的概念十分冗杂，各路信息参差不齐。本文原意是向实验室内同僚介绍相关概念，有兴趣了解相关知识的同学也可以阅读。有关卷积神经网络，支持向量机等具体的部分，我会在用时适时更新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;1、概述&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;人工智能，像长生不老和星际漫游一样，是人类最美好的梦想之一。&lt;/p&gt;

&lt;p&gt;虽然计算机技术已经取得了长足的进步，但是到目前为止，还没有一台电脑能产生“自我”的意识。在人类和大量现成数据的帮助下，电脑可以表现的十分强大，但是离开了这两者，它甚至都不能分辨一只猫和一只狗。&lt;/p&gt;

&lt;p&gt;图灵在 1950 年的论文里，提出图灵测试的设想。这无疑给计算机，尤其是人工智能，预设了一个很高的期望值。但是半个世纪过去了，人工智能的进展，远远没有达到图灵测试的标准。这让人们认为人工智能相关领域是“伪科学”。&lt;/p&gt;

&lt;p&gt;但是自 2006 年以来，机器学习领域，取得了突破性的进展。图灵测试，至少不是那么可望而不可及了。至于技术手段，不仅仅依赖于云计算对大数据的并行处理能力，而且依赖于算法。这个算法就是，“深度学习”。&lt;/p&gt;

&lt;p&gt;借助于 深度学习 算法，人类终于找到了如何处理“抽象概念”这个难题的方法。&lt;/p&gt;

&lt;p&gt;2012年6月，《纽约时报》披露了Google Brain项目，吸引了公众的广泛关注。这个项目是由著名的斯坦福大学的机器学习教授Andrew Ng和在大规模计算机系统方面的世界顶尖专家Jeff Dean共同主导，用16000个CPU Core的并行计算平台训练一种称为“深度神经网络”的机器学习模型。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/google-brain.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个叫做 DNN (deep neural network) 的机器学习模型内部共有10亿个节点。&lt;/p&gt;

&lt;p&gt;【这一网络自然是不能跟人类的神经网络相提并论的。要知道，人脑中可是有150多亿个神经元，互相连接的节点也就是突触数更是如银河沙数。曾经有人估算过，如果将一个人的大脑中所有神经细胞的轴突和树突依次连接起来，并拉成一根直线，可从地球连到月亮，再从月亮返回地球】。&lt;/p&gt;

&lt;p&gt;但是这个模型在语音识别和图像识别等领域获得了巨大的成功。&lt;/p&gt;

&lt;p&gt;项目负责人之一 Andrew 称：“我们没有像通常做的那样自己框定边界，而是直接把海量数据投放到算法中，让数据自己说话，系统会自动从数据中学习。”另外一名负责人 Jeff 则说：“我们在训练的时候从来不会告诉机器说：‘这是一只猫。’系统其实是自己发明或者领悟了“猫”的概念。”&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2、机器学习与深度学习&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;机器学习其实我们实验室的大多数同学都应该接触过。&lt;/p&gt;

&lt;p&gt;如果大家记性还可以的话，我上次讲到过的 MLP(多层感知器) 和 KNN(k-最近邻居) 算法都是典型的机器学习算法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/kNN-2.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;knn 算法示意图&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;knn 算法是典型的监督学习算法。&lt;/p&gt;

&lt;p&gt;步骤为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0800.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1959年美国的塞缪尔(Samuel)设计了一个下棋程序，这个程序具有学习能力，它可以在不断的对弈中改善自己的棋艺。4年后，这个程序战胜了设计者本人。又过了3年，这个程序战胜了美国一个保持8年之久的常胜不败的冠军。这个程序向人们展示了机器学习的能力，提出了许多令人深思的社会问题与哲学问题。&lt;/p&gt;

&lt;p&gt;国际象棋自然是科学家测试 AI 的好工具：64个格子，32个棋子，规则可以被正规的规则所描述。国际象棋的难度不在于描述问题。&lt;/p&gt;

&lt;p&gt;人和机器在某种程度上是互补的。人的计算能力远逊与计算机，给计算机数据和计算的规则，短时间内计算机就可以给出人穷尽一生页无法计算出来的结果。但是另一方面，在直觉和感知上，计算机比人类差的太多。简单的理解文字、识别图像，对于计算机来说无比困难。&lt;/p&gt;

&lt;p&gt;AI 系统需要自己获取知识的能力，从原始数据中提取模式。这种能力叫机器学习。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;logistics 回归可以预测你是否患了某种癌症；&lt;/li&gt;
  &lt;li&gt;朴素贝叶斯可以把正规邮件和垃圾邮件区分开；&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上这些机器学习算法的表现很大程度上取决于数据的“呈现”。比如，AI 系统不会直接去检查病人，相关信息是由医生提供的；但你要是直接把 核磁共振的结果放到逻辑回归的输入里，系统就没办法处理了，可是 MRI 的每个点都跟病人患癌有很大关联。&lt;/p&gt;

&lt;p&gt;==&amp;gt;数据的表现形式非常重要！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/QQ20160718-7.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在笛卡尔坐标系中用直线划开绿点和蓝点是不可能做到的，但是转换数据表示形式，在极坐标系中则轻而易举。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;机器学习虽然发展了几十年，但还是存在很多没有良好解决的问题：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/1365435414_9821.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如说：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图像识别&lt;/li&gt;
  &lt;li&gt;音频识别&lt;/li&gt;
  &lt;li&gt;自然语言处理&lt;/li&gt;
  &lt;li&gt;基因表达&lt;/li&gt;
  &lt;li&gt;天气预测&lt;/li&gt;
  &lt;li&gt;内容推荐&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以视觉处理为例子，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/1365435432_2281.jpg&quot; width=&quot;550&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后一部分是机器学习做的工作，绝大多数相关的论文也是集中在这一方面。&lt;/p&gt;

&lt;p&gt;中间的三个部分我们统称为特征表达。&lt;/p&gt;

&lt;p&gt;特征表达的好不好对最终结果有巨大影响。但是在普通的机器学习过程中，这个部分是由人工去完成的，靠人工去提取特征。&lt;/p&gt;

&lt;p&gt;比如在上次做特征选择的试验中，我们采用不同的特征选择方法对影响测光红移的特征进行筛选。然而，手工地选取特征是一件非常费力、启发式（需要专业知识）的方法，能不能选取好很大程度上靠经验和运气，而且它的调节需要大量的时间。&lt;/p&gt;

&lt;p&gt;既然手工选取特征不太好，那么能不能自动地学习一些特征呢？答案是可以的。&lt;/p&gt;

&lt;p&gt;某种意义上来说，深度学习的功能就是做这件事情——自动选择特征。看看它的别名unsupervised feature learning 就知道，不需要人参与特征的选择过程。&lt;/p&gt;

&lt;p&gt;近几十年以来，认知神经科学、生物学等等学科的发展，让我们对自己这个神秘的而又神奇的大脑不再那么的陌生。也给人工智能的发展推波助澜。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0811.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0812.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;3、人脑的视觉机理&lt;/h2&gt;

&lt;p&gt;1981 年的诺贝尔医学奖，颁发给了 David Hubel 和 TorstenWiesel，以及 Roger Sperry。前两位的主要贡献，是“发现了视觉系统的信息处理”：可视皮层是分级的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/1365435513_7934.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（具体的生物实验细节我就不啰嗦了，因为我也没太看明白。）&lt;/p&gt;

&lt;p&gt;他们得出的实验结果是：&lt;/p&gt;

&lt;p&gt;神经-中枢-大脑的工作过程，或许是一个不断迭代、不断抽象的过程。&lt;/p&gt;

&lt;p&gt;这里的关键词有两个，一个是抽象，一个是迭代。从原始信号，做低级抽象，逐渐向高级抽象迭代。人类的逻辑思维，经常使用高度抽象的概念。&lt;/p&gt;

&lt;p&gt;例如，从原始信号摄入开始（瞳孔摄入像素 Pixels），接着做初步处理（大脑皮层某些细胞发现边缘和方向），然后抽象（大脑判定，眼前的物体的形状，是圆形的），然后进一步抽象（大脑进一步判定该物体是只气球）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/1365435554_6921.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;总的来说，人的视觉系统的信息处理是分级的。从低级的V1区提取边缘特征，再到V2区的形状或者目标的部分等，再到更高层，整个目标、目标的行为等。也就是说高层的特征是低层特征的组合，从低层到高层的特征表示越来越抽象，越来越能表现语义或者意图。而抽象层面越高，存在的可能猜测就越少，就越利于分类。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;4、深度学习的基本思想&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;这一块我看了很多文献和讨论，很多人对深度学习都有不同的理解。我把这些人的想法综合了一下，提出我自己的想法，使其保持正确的同时，尽量的简洁易懂。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0801.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;让调整系统参数使 &lt;span class=&quot;MathJax_Preview&quot;&gt;\mathbb{O}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathbb{O}&lt;/script&gt; 尽量接近于 &lt;span class=&quot;MathJax_Preview&quot;&gt;\mathbb{I}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathbb{I}&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;以上就是深度学习的基本思想。&lt;/p&gt;

&lt;h2 id=&quot;shallow-learning&quot;&gt;5、深度学习 和 浅层学习(shallow learning)&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;机器学习的第一次浪潮是浅层学习：&lt;/h3&gt;

&lt;p&gt;八十年代出现的 BP 算法(反向传播算法)，开启了基于统计模型的机器学习，这个热潮一直持续到现在。&lt;/p&gt;

&lt;p&gt;利用BP算法可以让一个人工神经网络模型从大量训练样本中学习统计规律，从而对未知事件做预测。这种基于统计的机器学习方法比起过去基于人工规则的系统，在很多方面显出优越性。这个时候的人工神经网络，虽也被称作多层感知机（Multi-layer Perceptron），但实际是种只含有一层隐层节点的浅层模型。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0802.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;20世纪90年代，各种各样的浅层机器学习模型相继被提出，例如支撑向量机、Boosting、最大熵方法（如Logistic Regression）等。这些模型的结构基本上可以看成带有一层隐层节点（如SVM、Boosting），或没有隐层节点（如LR）。这些模型无论是在理论分析还是应用中都获得了巨大的成功。&lt;/p&gt;

&lt;p&gt;相比之下，由于理论分析的难度大，训练方法又需要很多经验和技巧，这个时期浅层人工神经网络反而相对沉寂。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;机器学习的第二次浪潮是深度学习：&lt;/h3&gt;

&lt;p&gt;2006年，加拿大多伦多大学教授、机器学习领域的泰斗Geoffrey Hinton和他的学生RuslanSalakhutdinov在《科学》上发表了一篇文章，开启了深度学习在学术界和工业界的浪潮。这篇文章有两个主要观点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多隐层的人工神经网络具有优异的特征学习能力，学习得到的特征对数据有更本质的刻画，从而有利于可视化或分类。&lt;/li&gt;
  &lt;li&gt;深度神经网络在训练上的难度，可以通过“逐层初始化”来有效克服，在这篇文章中，逐层初始化是通过无监督学习实现的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们在很多机器学习的教程中看到的线性回归、分类等学习算法，本质是浅层学习算法。他们的局限性在于对复杂的函数表示能力有限，遇到复杂的分类问题时，泛化能力一般。&lt;/p&gt;

&lt;p&gt;而深度学习是一种非线性的深层网络结构，实现复杂函数的逼近。显示出一种从少数样本集中学习数据集本质特征的能力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/1365439310_9542.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图显示了深度学习的一个优点：“多层”可以用较少参数表示复杂函数&lt;/p&gt;

&lt;p&gt;深度学习的实质，是通过构建具有很多隐层的机器学习模型和海量的训练数据，来学习更有用的特征，从而最终提升分类或预测的准确性。&lt;/p&gt;

&lt;p&gt;因此，“深度模型”是手段，“特征学习”是目的。&lt;/p&gt;

&lt;p&gt;区别于传统的浅层学习，深度学习的不同在于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;强调了模型结构的深度，通常有5层、6层，甚至10多层的隐层节点；&lt;/li&gt;
  &lt;li&gt;明确突出了特征学习的重要性，也就是说，通过逐层特征变换，将样本在原空间的特征表示变换到一个新特征空间，从而使分类或预测更加容易。与人工规则构造特征的方法相比，利用大数据来学习特征，更能够刻画数据的丰富内在信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;6、深度学习与神经网络&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;深度学习是机器学习的一个分支，是神经网络的发展。&lt;/p&gt;

&lt;p&gt;深度学习与传统的神经网络之间有相同的地方也有很多不同。&lt;/p&gt;

&lt;p&gt;相同：
深度学习采用了神经网络相似的分层结构，系统由包括输入层、隐层（多层）、输出层组成的多层网络，只有相邻层节点之间有连接，同一层以及跨层节点之间相互无连接，每一层可以看作是一个logistic regression模型；这种分层结构，是比较接近人类大脑的结构的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/1365439360_3108.jpg&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不同：
为了克服神经网络训练中的问题，DL采用了与神经网络很不同的训练机制。
传统神经网络中，采用的是反向传播的方式进行，简单来讲就是采用迭代的算法来训练整个网络，随机设定初值，计算当前网络的输出，然后根据当前输出和label之间的差去改变前面各层的参数，直到收敛（整体是一个梯度下降法）。&lt;/p&gt;

&lt;p&gt;而深度学习整体上是一个“逐层”的训练机制。这样做的原因是因为，如果采用反向传播的机制，对于一个7层以上的深度网络，残差传播到最前面的层已经变得太小，出现所谓的梯度扩散。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;7、深度学习的训练过程&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;BP 算法：(Back-propagation)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0810.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/0799b3d6e5e92245ee937db3c26d1b80_r.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BP 算法存在的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;梯度越来越稀疏：从顶层越往下，误差校正信号越来越小；&lt;/li&gt;
  &lt;li&gt;收敛到局部最小值：尤其是从远离最优区域开始的时候（随机值初始化会导致这种情况的发生）；&lt;/li&gt;
  &lt;li&gt;一般，我们只能用有标签的数据来训练：但大部分的数据是没标签的，而大脑可以从没有标签的的数据中学习；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/QQ20160720-0.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;深度学习的训练方法：&lt;/p&gt;

&lt;p&gt;如果对所有层同时训练，时间复杂度会太高；如果每次训练一层，偏差就会逐层传递。这会面临跟上面监督学习中相反的问题，会严重欠拟合（因为深度网络的神经元和参数太多了）。&lt;/p&gt;

&lt;p&gt;2006年，Hinton提出了在非监督数据上建立多层神经网络的一个有效方法，简单的说，分为两步，一是每次训练一层网络，二是调优，采用一种 wake-sleep 算法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/img_0807.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wake-sleep 算法是一种适用于随机多层神经网络的无监督学习算法。此算法包括两个阶段——“睡”和“醒”。此算法是后来才被应用到机器学习领域的，可以被视为训练 Helmholtz machine 的一种方法。&lt;/p&gt;

&lt;p&gt;为什么 wake-sleep 算法可以弥补 BP 算法的缺陷？&lt;/p&gt;

&lt;p&gt;在我看来，wake-sleep 基于第一步得到的各层参数进一步fine-tune整个多层模型的参数，这一步是一个有监督训练过程；第一步类似神经网络的随机初始化初值过程，由于深度学习的第一步不是随机初始化，而是通过学习输入数据的结构得到的，因而这个初值更接近全局最优，从而能够取得更好的效果。&lt;/p&gt;

&lt;p&gt;所以深度学习效果好很大程度上归功于第一步的特征学习过程。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;8、深度学习的常见模型&lt;/h2&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;自动编码机&lt;/li&gt;
  &lt;li&gt;稀疏编码&lt;/li&gt;
  &lt;li&gt;限制玻尔兹曼机&lt;/li&gt;
  &lt;li&gt;深信度网络&lt;/li&gt;
  &lt;li&gt;卷积神经网络&lt;/li&gt;
  &lt;li&gt;递归神经网络&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-9&quot;&gt;9、深度学习的应用领域&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;(1)图像处理：dreaming deep with caffe&lt;/p&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://github.com/google/deepdream&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;模拟人做梦时候的图像。
原理是用某种风格的图像来训练出模型，然后再把模型应用到自选的图片上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/van-gogh-starry-night-3d-poster.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/fall_reflection_silver_lake_california-wallpaper-1280x800.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/dream_8ea55d1fc6.jpg&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(2)语音处理：Music and Art Generation with Machine Intelligence&lt;/p&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://github.com/tensorflow/magenta&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(3)人工智能：AlphaGo&lt;/p&gt;

&lt;p&gt;要了解 AlphaGo，首先我们需要了解 AlphaGo 背后到底是一个什么东西。&lt;/p&gt;

&lt;p&gt;它背后是一套神经网络系统，由 Google 2014 年收购的英国人工智能公司 DeepMind 开发。这个系统和深蓝不同，不是一台超级计算机，而是一个由许多个数据中心作为节点相连，每个节点内有着多台超级计算机的神经网络系统。就像人脑，是由 50-100 亿个神经元所组成的，这也是为什么这种机器学习架构被称为神经网络。&lt;/p&gt;

&lt;p&gt;AlphaGo 只是在这个系统的基础上开发的一个实例【围棋的英文就叫GO】。&lt;/p&gt;

&lt;p&gt;这个系统的基础是 CNN，就是前面提到过的卷积神经网络。在 CNN 的基础上借鉴了深度强化学习(Deep Q-Learning, DQN)的思想。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;10 万盘高手棋谱作为初始数据，进行分类后用于训练策略函数；然后跟自己下棋；强化学习训练策略函数，继续下棋；下了 3000 万步后进行回归分析，整合蒙特卡洛树搜索模型，训练效用函数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/b1601727gw1f0f9cfwp6qg20hr08gqv5.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;传统的棋类 AI：穷举。&lt;/p&gt;

&lt;p&gt;AlphaGo：高级搜索树+深度神经网络(策略网络预测走法，价值网络预测胜负)&lt;/p&gt;

&lt;p&gt;(4)其他领域&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过改进RNN用来解决一些传统cs问题，比如凸包，三角剖分，甚至是TSP；&lt;/li&gt;
  &lt;li&gt;用LSTM来实现task-specific的自动化编程；&lt;/li&gt;
  &lt;li&gt;Learning to learn by gradient descent by gradient descent (通过通过梯度下降学习学习)；&lt;/li&gt;
  &lt;li&gt;Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning (视频预测)；&lt;/li&gt;
  &lt;li&gt;开飞机；&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-10&quot;&gt;10、深度学习的未来&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;(1)缺陷&lt;/p&gt;

&lt;p&gt;深度学习被批评为经验主义科学，在很多地方没法解释原理，研究者只能像研究黑盒子一样管理输入输出，并盲目地调整参数。&lt;/p&gt;

&lt;p&gt;“对深度学习的主要批评是许多方法缺乏理论支撑。大多数深度结构仅仅是梯度下降的某些变式。尽管梯度下降已经被充分地研究，但理论涉及的其他算法，例如对比分歧算法，并没有获得充分的研究，其收敛性等问题仍不明确。深度学习方法常常被视为黑盒，大多数的结论确认都由经验而非理论来确定。”&lt;/p&gt;

&lt;p&gt;(2)难点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;局部最优问题；&lt;/li&gt;
  &lt;li&gt;内存消耗大；&lt;/li&gt;
  &lt;li&gt;人脑机理还有很多没有用上；&lt;/li&gt;
  &lt;li&gt;人为设计模板的可行性；&lt;/li&gt;
  &lt;li&gt;代价函数的设计方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tensorflow-softmax&quot;&gt;11、tensorflow 框架演示(单层softmax)&lt;/h2&gt;

&lt;h3 id=&quot;section-11&quot;&gt;添加数据&lt;/h3&gt;

&lt;p&gt;对数据做一下说明。&lt;/p&gt;

&lt;p&gt;数据分成了三部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;55,000份训练数据(mnist.train)&lt;/li&gt;
  &lt;li&gt;10,000份测试数据(mnist.test)&lt;/li&gt;
  &lt;li&gt;5,000份验证数据(mnist.validation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每一个数据有两部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;xs:手写数字的图像 —&amp;gt; (mnist.train.images)&lt;/li&gt;
  &lt;li&gt;ys:对应的标签 —&amp;gt; (mnist.train.labels)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;input_data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_data_sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MNIST_data/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_hot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Extracting MNIST_data/train-images-idx3-ubyte.gz
Extracting MNIST_data/train-labels-idx1-ubyte.gz
Extracting MNIST_data/t10k-images-idx3-ubyte.gz
Extracting MNIST_data/t10k-labels-idx1-ubyte.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-12&quot;&gt;如何表示数据&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;对于image:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们把28px*28px的图像分成784个像素点，在python中表现为784个vector。在训练集中，mnist.train.images 是一个 tensor，大小为[55000,784]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于 label:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们把 label 定义成一种 one-hot vector。比方说，3就成为[0,0,0,1,0,0,0,0,0,0]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/mnist-train-xs.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/mnist-train-ys.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;placeholder 的意思就是当我们要做运算的时候我们再输入值。
None 表示可以是任意值。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;W,b 是我们需要学习的参数，在运算过程中是可以改变的，所以我们把它设成 Variables.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在我们实现我们的模型，就这么一行代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/dl/softmax-regression-scalargraph.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;softmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-13&quot;&gt;训练模型&lt;/h3&gt;

&lt;p&gt;要训练我们的模型，首先我们需要定义什么样的模型才是好的模型。&lt;/p&gt;

&lt;p&gt;回顾前面的知识，我们知道模型需要一个代价函数(cost function)。这里我们采用交叉熵代价函数。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;y_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;交叉熵函数的定义&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;H_{y^\prime}(y)=-\sum_i y_i^\prime log(y_i)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;H_{y^\prime}(y)=-\sum_i y_i^\prime log(y_i)&lt;/script&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cross_entropy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduction_indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;定义训练的每一步的步骤，做训练前的准备。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;train_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cross_entropy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize_all_variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进行训练&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;batch_xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;检查一下正确率&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;correct_prediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;correct_prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.9208
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tensorflow-relu&quot;&gt;12、tensorflow 框架演示(双层ReLU)&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Import MINST data&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;input_data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_data_sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MNIST_data/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_hot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Extracting MNIST_data/train-images-idx3-ubyte.gz
Extracting MNIST_data/train-labels-idx1-ubyte.gz
Extracting MNIST_data/t10k-images-idx3-ubyte.gz
Extracting MNIST_data/t10k-labels-idx1-ubyte.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;training_epochs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;display_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Network Parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_hidden_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1st layer number of features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_hidden_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 2nd layer number of features&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# MNIST data input (img shape: 28*28)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# MNIST total classes (0-9 digits)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# tf Graph input&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multilayer_perceptron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Hidden layer with RELU activation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layer_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layer_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Hidden layer with RELU activation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layer_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layer_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Output layer with linear activation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out_layer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_layer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Store layers weight &amp;amp; bias&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_hidden_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'h2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_hidden_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_hidden_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_hidden_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;biases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'b1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_hidden_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'b2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_hidden_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Construct model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multilayer_perceptron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define loss and optimizer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;softmax_cross_entropy_with_logits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdamOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Initializing the variables&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize_all_variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Launch the graph&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Training cycle&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;training_epochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;avg_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total_batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Loop over all batches&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;batch_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Run optimization op (backprop) and cost op (to get loss value)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                          &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Compute average loss&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;avg_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_batch&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Display logs per epoch step&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Epoch:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%04&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cost=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                &lt;span class=&quot;s&quot;&gt;&quot;{:.9f}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Optimization Finished!&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Test model&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;correct_prediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Calculate accuracy&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;correct_prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;float&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accuracy:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Epoch: 0001 cost= 176.348633782
Epoch: 0002 cost= 42.163573426
Epoch: 0003 cost= 26.251044493
Epoch: 0004 cost= 18.303292441
Epoch: 0005 cost= 13.337450484
Epoch: 0006 cost= 9.829535431
Epoch: 0007 cost= 7.438563815
Epoch: 0008 cost= 5.577553053
Epoch: 0009 cost= 4.213337710
Epoch: 0010 cost= 3.108810833
Epoch: 0011 cost= 2.451028091
Epoch: 0012 cost= 1.861590531
Epoch: 0013 cost= 1.460881729
Epoch: 0014 cost= 1.074084880
Epoch: 0015 cost= 0.834198667
Epoch: 0016 cost= 0.648311651
Epoch: 0017 cost= 0.555110107
Epoch: 0018 cost= 0.583470874
Epoch: 0019 cost= 0.510592484
Epoch: 0020 cost= 0.452281083
Epoch: 0021 cost= 0.488092144
Epoch: 0022 cost= 0.376768316
Epoch: 0023 cost= 0.371282564
Epoch: 0024 cost= 0.336428243
Epoch: 0025 cost= 0.345291770
Epoch: 0026 cost= 0.337952591
Epoch: 0027 cost= 0.318299568
Epoch: 0028 cost= 0.272286880
Epoch: 0029 cost= 0.333838176
Epoch: 0030 cost= 0.281508733
Epoch: 0031 cost= 0.280804645
Epoch: 0032 cost= 0.256072080
Epoch: 0033 cost= 0.246608315
Epoch: 0034 cost= 0.254854202
Epoch: 0035 cost= 0.212766817
Epoch: 0036 cost= 0.294256025
Epoch: 0037 cost= 0.208398752
Epoch: 0038 cost= 0.189994233
Epoch: 0039 cost= 0.191928244
Epoch: 0040 cost= 0.213503004
Epoch: 0041 cost= 0.226723124
Epoch: 0042 cost= 0.171643451
Epoch: 0043 cost= 0.257747782
Epoch: 0044 cost= 0.192309855
Epoch: 0045 cost= 0.149195256
Epoch: 0046 cost= 0.195581870
Epoch: 0047 cost= 0.196837781
Epoch: 0048 cost= 0.142720352
Epoch: 0049 cost= 0.190415204
Epoch: 0050 cost= 0.194574075
Optimization Finished!
Accuracy: 0.9598
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;准确率比单层softmax 提高不少。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下回有机会再深入讲一下 卷积神经网络 或者 递归神经网络，取决于需求。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>构建一个神经网络：逻辑分类函数</title>
   <link href="http://puxuan.coding.me//2016/07/11/neural-network-2/"/>
   <updated>2016-07-11T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/07/11/neural-network-2</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;实现神经网络：逻辑分类函数&lt;/h2&gt;

&lt;p&gt;如果想用神经网络来完成分类的工作，我们需要对输出 &lt;span class=&quot;MathJax_Preview&quot;&gt;t&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; 输出一个概率分布。&lt;/p&gt;

&lt;p&gt;如果只分两类：&lt;span class=&quot;MathJax_Preview&quot;&gt;t=1&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t=1&lt;/script&gt; 或 &lt;span class=&quot;MathJax_Preview&quot;&gt;t=0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t=0&lt;/script&gt;,我们用逻辑回归中的逻辑函数。&lt;/p&gt;

&lt;p&gt;如果要分多类，上述函数有扩展版本称为 &lt;strong&gt;softmax function&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下面我们主要讲一下逻辑函数。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;逻辑函数&lt;/h3&gt;

&lt;p&gt;目标是通过输入&lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;预测目标类&lt;span class=&quot;MathJax_Preview&quot;&gt;t&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;。输入&lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;被归为 &lt;span class=&quot;MathJax_Preview&quot;&gt;t=1&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t=1&lt;/script&gt; 时的概率 &lt;span class=&quot;MathJax_Preview&quot;&gt;P(t=1 \mid z)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;P(t=1 \mid z)&lt;/script&gt; 用逻辑函数 &lt;span class=&quot;MathJax_Preview&quot;&gt;y = \sigma(z)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y = \sigma(z)&lt;/script&gt; 的输出&lt;span class=&quot;MathJax_Preview&quot;&gt;y&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;来表示。&lt;span class=&quot;MathJax_Preview&quot;&gt;\sigma&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt;即是逻辑函数，其定义为：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\sigma(z) = \frac{1}{1+e^{-z}}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sigma(z) = \frac{1}{1+e^{-z}}&lt;/script&gt;

&lt;p&gt;对于给定的输入&lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;，分类的两种结果的概率分别写为：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;P(t=1\mid z) = \sigma(z) = \frac{1}{1+e^{-z}}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(t=1\mid z) = \sigma(z) = \frac{1}{1+e^{-z}}&lt;/script&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;P(t=0\mid z) = 1 - \sigma(z) = \frac{e^{-z}}{1+e^{-z}}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(t=0\mid z) = 1 - \sigma(z) = \frac{e^{-z}}{1+e^{-z}}&lt;/script&gt;

&lt;p&gt;注意这里的输入 &lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; 其实就是概率比的对数：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;log \frac{P(t=1\mid z)}{P(t=0\mid z)} = log \frac{\frac{1}{1+e^{-z}}}{\frac{e^{-z}}{1+e^{-z}}} = log \frac{1}{e^{-z}} = log(1) - log(e^{-z}) = z&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;log \frac{P(t=1\mid z)}{P(t=0\mid z)} = log \frac{\frac{1}{1+e^{-z}}}{\frac{e^{-z}}{1+e^{-z}}} = log \frac{1}{e^{-z}} = log(1) - log(e^{-z}) = z&lt;/script&gt;

&lt;p&gt;这意味着 对数概率比(log odds ratio): &lt;span class=&quot;MathJax_Preview&quot;&gt;log(P(t=1\mid z)/P(t=0\mid z))&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;log(P(t=1\mid z)/P(t=0\mid z))&lt;/script&gt; 随着&lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;是线性变化的。那么如果说神经网络中 &lt;span class=&quot;MathJax_Preview&quot;&gt;z = x * w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z = x * w&lt;/script&gt;，那么对数概率比随着参数 w 和输入样本 x 线性变化。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logistic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logistic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$z$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sigma(z)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logistic function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nn2/output_5_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;逻辑函数的导数&lt;/h3&gt;

&lt;p&gt;神经网络中经常使用基于梯度的优化技术，所以有必要计算一下输出 &lt;span class=&quot;MathJax_Preview&quot;&gt;y&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; 关于输入 &lt;span class=&quot;MathJax_Preview&quot;&gt;x&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 的导数。&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\frac{\partial y}{\partial z} = \frac{\partial \sigma(z)}{\partial z} = \frac{\partial \frac{1}{1+e^{-z}}}{\partial z} = \frac{-1}{(1+e^{-z})^2} *e^{-z}*-1 = \frac{1}{1+e^{-z}} \frac{e^{-z}}{1+e^{-z}} = y(1-y)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial y}{\partial z} = \frac{\partial \sigma(z)}{\partial z} = \frac{\partial \frac{1}{1+e^{-z}}}{\partial z} = \frac{-1}{(1+e^{-z})^2} *e^{-z}*-1 = \frac{1}{1+e^{-z}} \frac{e^{-z}}{1+e^{-z}} = y(1-y)&lt;/script&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logistic_derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logistic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logistic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logistic_derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$z$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;frac{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;partial &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sigma(z)}{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;partial z}$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'derivative of the logistic function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nn2/output_8_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;逻辑函数的 交叉熵成本函数&lt;/h3&gt;

&lt;p&gt;回顾一下逻辑函数 &lt;span class=&quot;MathJax_Preview&quot;&gt;y = \sigma (z)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y = \sigma (z)&lt;/script&gt;，输入&lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;属于一类(t=1)的概率为&lt;span class=&quot;MathJax_Preview&quot;&gt;y&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;，属于另一类(t=0)的概率为 &lt;span class=&quot;MathJax_Preview&quot;&gt;1-y&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;1-y&lt;/script&gt;。我们记为：&lt;span class=&quot;MathJax_Preview&quot;&gt;P(t=1\mid z) = \sigma(z) = y&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;P(t=1\mid z) = \sigma(z) = y&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;在这个情况下如何优化神经网络模型呢？&lt;/p&gt;

&lt;p&gt;在线性回归问题中，我们用的 &lt;span class=&quot;MathJax_Preview&quot;&gt;J(\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;J(\theta)&lt;/script&gt; 在这里并不适用，因为它不再是一个凸函数，所以我们得重新去想一个误差函数来评价并优化我们的神经网络。&lt;/p&gt;

&lt;p&gt;理想状态下，当&lt;span class=&quot;MathJax_Preview&quot;&gt;y=h_\theta&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y=h_\theta&lt;/script&gt;时，误差为零；&lt;span class=&quot;MathJax_Preview&quot;&gt;y+h_\theta = 1&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y+h_\theta = 1&lt;/script&gt;时，误差为正无穷。Andrew Ng 讲到直接采用&lt;span class=&quot;MathJax_Preview&quot;&gt;-log(h_\theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;-log(h_\theta)&lt;/script&gt;在&lt;span class=&quot;MathJax_Preview&quot;&gt;(0,1]&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;(0,1]&lt;/script&gt;上的性质来达到这一目的，但是正面推导采用了极大似然估计(MLE)他跳过没讲。这里我们讲一下具体的推导。&lt;/p&gt;

&lt;p&gt;对于每一个输入的样本，给定的一系列参数&lt;span class=&quot;MathJax_Preview&quot;&gt;\theta&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;可以准确预测出正确的类，这样的事件是有一定的似然(likelihood)，我们要做的就是对这个似然求极大。对于每个样本&lt;span class=&quot;MathJax_Preview&quot;&gt;i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;，参数&lt;span class=&quot;MathJax_Preview&quot;&gt;\theta&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;可以被转换成逻辑函数的输入 &lt;span class=&quot;MathJax_Preview&quot;&gt;z_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z_i&lt;/script&gt;。极大似然可以写成：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\arg\max_\theta \mathcal{L}(\theta \mid t,z) = \arg\max_\theta \prod_{i=1}^{n} \mathcal{L}(\theta \mid t_i,z_i)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arg\max_\theta \mathcal{L}(\theta \mid t,z) = \arg\max_\theta \prod_{i=1}^{n} \mathcal{L}(\theta \mid t_i,z_i)&lt;/script&gt;

&lt;p&gt;似然 &lt;span class=&quot;MathJax_Preview&quot;&gt;\mathcal{L}(\theta \mid t,z)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}(\theta \mid t,z)&lt;/script&gt; 可以被重新写成联合概率的形式 &lt;span class=&quot;MathJax_Preview&quot;&gt;P(t,z \mid \theta)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;P(t,z \mid \theta)&lt;/script&gt;。由条件概率的定义 &lt;span class=&quot;MathJax_Preview&quot;&gt;P(A,B) = P(A \mid B) * P(B)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;P(A,B) = P(A \mid B) * P(B)&lt;/script&gt;，有：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;P(t,z \mid \theta) = P(t \mid z,\theta)P(z \mid \theta)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(t,z \mid \theta) = P(t \mid z,\theta)P(z \mid \theta)&lt;/script&gt;

&lt;p&gt;我们对&lt;span class=&quot;MathJax_Preview&quot;&gt;z&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;的概率不感兴趣，所以我们可以写成：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\mathcal{L}(\theta\mid t,z) = P(t \mid z,\theta) = \prod_{i=1}^{n} P(t_i \mid z_i,\theta)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}(\theta\mid t,z) = P(t \mid z,\theta) = \prod_{i=1}^{n} P(t_i \mid z_i,\theta)&lt;/script&gt;

&lt;p&gt;由于 &lt;span class=&quot;MathJax_Preview&quot;&gt;t_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t_i&lt;/script&gt; 是伯努利变量【伯努利分布 = 0-1分布 = 两点分布】，且对于给定的&lt;span class=&quot;MathJax_Preview&quot;&gt;\theta&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;， &lt;span class=&quot;MathJax_Preview&quot;&gt;P(t \mid z) = y&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;P(t \mid z) = y&lt;/script&gt;， 所以我们可以重写：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;P(t\mid z) = \prod_{i=1}^{n} P(t_i=1 \mid z_i)^{t_i} * (1 - P(t_i=1 \mid z_i))^{1-t_i} = \prod_{i=1}^{n} y_i^{t_i} * (1 - y_i)^{1-t_i}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(t\mid z) = \prod_{i=1}^{n} P(t_i=1 \mid z_i)^{t_i} * (1 - P(t_i=1 \mid z_i))^{1-t_i} = \prod_{i=1}^{n} y_i^{t_i} * (1 - y_i)^{1-t_i}&lt;/script&gt;

&lt;p&gt;因为逻辑函数是一个单调递增函数，所以我们可以优化 对数-似然函数 &lt;span class=&quot;MathJax_Preview&quot;&gt;\arg\max_\theta \log \mathcal{L}(\theta \mid t,z)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\arg\max_\theta \log \mathcal{L}(\theta \mid t,z)&lt;/script&gt;。这个最大值和正常的似然函数最大值相同。&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;log \mathcal{L}(\theta\mid t,z) = log \prod_{i=1}^{n} y_i^{t_i} * (1 - y_i)^{1-t_i} = \sum_{i=1}^{n} t_i log(y_i) + (1-t_i) log(1 - y_i)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;log \mathcal{L}(\theta\mid t,z) = log \prod_{i=1}^{n} y_i^{t_i} * (1 - y_i)^{1-t_i} = \sum_{i=1}^{n} t_i log(y_i) + (1-t_i) log(1 - y_i)&lt;/script&gt;

&lt;p&gt;显然这个函数是负值。要想求最大似然，就得求函数的负值的最小值。&lt;/p&gt;

&lt;p&gt;误差函数 &lt;span class=&quot;MathJax_Preview&quot;&gt;\xi(t,y)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\xi(t,y)&lt;/script&gt;被称为 交叉熵误差函数（对数损失）:&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\xi(t,y) = - log \mathcal{L}(\theta\mid t,z) = - \sum_{i=1}^{n} \left[ t_i log(y_i) + (1-t_i)log(1-y_i) \right] = - \sum_{i=1}^{n} \left[ t_i log(\sigma(z) + (1-t_i)log(1-\sigma(z)) \right]&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\xi(t,y) = - log \mathcal{L}(\theta\mid t,z) = - \sum_{i=1}^{n} \left[ t_i log(y_i) + (1-t_i)log(1-y_i) \right] = - \sum_{i=1}^{n} \left[ t_i log(\sigma(z) + (1-t_i)log(1-\sigma(z)) \right]&lt;/script&gt;

&lt;p&gt;重写：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\xi(t_i,y_i) =
   \begin{cases}
   -log(y_i) &amp;amp; \text{if } t_i = 1 \\
   -log(1-y_i) &amp;amp; \text{if } t_i = 0
  \end{cases}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\xi(t_i,y_i) =
   \begin{cases}
   -log(y_i) &amp; \text{if } t_i = 1 \\
   -log(1-y_i) &amp; \text{if } t_i = 0
  \end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;这样，当 t=1 而 y=0 时，误差趋近于正无穷；y=1 时误差趋近于0。&lt;/p&gt;

&lt;p&gt;鉴于&lt;span class=&quot;MathJax_Preview&quot;&gt;t&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;取值非0即1，我们可以重写函数：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\xi(t,y) = -t * log(y) - (1-t) * log(1-y)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\xi(t,y) = -t * log(y) - (1-t) * log(1-y)&lt;/script&gt;

&lt;p&gt;n个样本的和加起来，则有：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\xi(t,y) = - \sum_{i=1}^{n} \left[ t_i log(y_i) + (1-t_i)log(1-y_i) \right]&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\xi(t,y) = - \sum_{i=1}^{n} \left[ t_i log(y_i) + (1-t_i)log(1-y_i) \right]&lt;/script&gt;

&lt;h3 id=&quot;section-4&quot;&gt;逻辑函数的交叉熵成本函数的导数&lt;/h3&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\frac{\partial \xi}{\partial y} = \frac{\partial (-t * log(y) - (1-t)* log(1-y))}{\partial y} = \frac{\partial (-t * log(y))}{\partial y} +  \frac{\partial (- (1-t)*log(1-y))}{\partial y} = -\frac{t}{y} + \frac{1-t}{1-y} = \frac{y-t}{y(1-y)}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial \xi}{\partial y} = \frac{\partial (-t * log(y) - (1-t)* log(1-y))}{\partial y} = \frac{\partial (-t * log(y))}{\partial y} +  \frac{\partial (- (1-t)*log(1-y))}{\partial y} = -\frac{t}{y} + \frac{1-t}{1-y} = \frac{y-t}{y(1-y)}&lt;/script&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\frac{\partial \xi}{\partial z} = \frac{\partial y}{\partial z} \frac{\partial \xi}{\partial y} = y (1-y) \frac{y-t}{y(1-y)} = y-t&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial \xi}{\partial z} = \frac{\partial y}{\partial z} \frac{\partial \xi}{\partial y} = y (1-y) \frac{y-t}{y(1-y)} = y-t&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>构建一个神经网络：成本函数 和 梯度下降</title>
   <link href="http://puxuan.coding.me//2016/07/10/neural-network-1/"/>
   <updated>2016-07-10T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/07/10/neural-network-1</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;如何构建一个神经网络&lt;/h2&gt;
&lt;p&gt;一般的神经网络中，我们都有多层、非线性的激活函数（activation function），而且每个节点都有偏置项。&lt;/p&gt;

&lt;p&gt;在这里，我们暂时先只写一层，一个权重参数 w，输出没有激活函数，没有偏置项。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;先导入依赖&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#设置 random 的 seed，使随机变成伪随机&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;定义目标函数&lt;/h3&gt;

&lt;p&gt;在这个例子中，目标函数  &lt;span class=&quot;MathJax_Preview&quot;&gt;\mathbf{t}=f(\mathbf{x})+\mathcal{N}(0,0.2)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathbf{t}=f(\mathbf{x})+\mathcal{N}(0,0.2)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;span class=&quot;MathJax_Preview&quot;&gt;\mathcal{N}(0,0.2)&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathcal{N}(0,0.2)&lt;/script&gt;是我们加进去的高斯噪声（正态分布）,  &lt;span class=&quot;MathJax_Preview&quot;&gt;f(\mathbf{x})=\mathbf{x}*2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{x})=\mathbf{x}*2&lt;/script&gt; .&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 产生一个一致(0,1)分布的20个数据, x.shape = (20,)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;noise_variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# x.shape[0] = 20, randn 输出一个20(*1)的标准正态分布矩阵&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noise_variance&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'f(x)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$x$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$t$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'inputs (x) vs targets (t)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nn1/output_5_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;定义成本函数&lt;/h3&gt;

&lt;p&gt;我们现在的模型是 &lt;span class=&quot;MathJax_Preview&quot;&gt;\mathbf{y} = \mathbf{x}*w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathbf{y} = \mathbf{x}*w&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;我们优化的目的是使 &lt;span class=&quot;MathJax_Preview&quot;&gt;\xi = \sum_{i=1}^{N} \Vert t_i - y_i \Vert ^2&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\xi = \sum_{i=1}^{N} \Vert t_i - y_i \Vert ^2&lt;/script&gt; 取到最小值。&lt;/p&gt;

&lt;p&gt;神经网络是通过 &lt;strong&gt;nn(x,w)&lt;/strong&gt; 函数来实现的；成本函数是通过 &lt;strong&gt;cost(y,t)&lt;/strong&gt; 来实现的。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# ws 是一个 list, 包含0-4之间的100个均匀分布的数&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cost_ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# ws 中每个值对应的 cost&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 制图&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost_ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$w$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xi$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cost vs. weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nn1/output_8_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中我们可以看出来，w=2 的时候 &lt;span class=&quot;MathJax_Preview&quot;&gt;\xi&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\xi&lt;/script&gt; 值最低。w=2 也是我们为 f(x) 选定的斜率。&lt;/p&gt;

&lt;p&gt;注意这个方程是一个凸函数，所以只有一个最小值。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;优化成本函数&lt;/h2&gt;

&lt;p&gt;这个例子中最佳权重 w 用肉眼都可以看出来。但是大多数情况下问题没有这么简单，比如&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当遇到 Rastrigin function 的时候:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;f(\mathbf{x}) = An + \sum_{i=1}^n[x_i^2 - A cos(2\pi x_i)]&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(\mathbf{x}) = An + \sum_{i=1}^n[x_i^2 - A cos(2\pi x_i)]&lt;/script&gt;

&lt;p&gt;其中 &lt;span class=&quot;MathJax_Preview&quot;&gt;A=10&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;A=10&lt;/script&gt; 且 &lt;span class=&quot;MathJax_Preview&quot;&gt;x_i \in [-5.12, +5.12]&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;x_i \in [-5.12, +5.12]&lt;/script&gt;. 在 &lt;span class=&quot;MathJax_Preview&quot;&gt;x=0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;x=0&lt;/script&gt; 取最小值 &lt;span class=&quot;MathJax_Preview&quot;&gt;f(x) = 0&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;f(x) = 0&lt;/script&gt; .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当遇到多维的情况时：每一个参数都会增加一维。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以我们需要优化这个算法。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;梯度下降&lt;/h3&gt;

&lt;p&gt;最常用的优化算法之一就是梯度下降算法。它的原理是在成本函数的某一点（参数）上对 &lt;span class=&quot;MathJax_Preview&quot;&gt;\xi&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\xi&lt;/script&gt; 求导数，然后在负梯度方向更新参数。参数 w 被迭代更新，步数与负梯度成比例：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;w(k+1) = w(k) - \Delta w(k)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w(k+1) = w(k) - \Delta w(k)&lt;/script&gt;

&lt;p&gt;其中 w(k) 是第 k 次迭代中 w 的值。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;\Delta w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Delta w&lt;/script&gt; 的定义为：
&lt;span class=&quot;MathJax_Preview&quot;&gt;\Delta w = \mu \frac{\partial \xi}{\partial w}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Delta w = \mu \frac{\partial \xi}{\partial w}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;其中，&lt;span class=&quot;MathJax_Preview&quot;&gt;\mu&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; 是“学习速度”(learning rate)，也就是在梯度方向上移动的距离。&lt;/p&gt;

&lt;p&gt;对于样本&lt;span class=&quot;MathJax_Preview&quot;&gt;i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, 梯度可以根据链式法则进行拆分:&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\frac{\partial \xi_i}{\partial w} = \frac{\partial y_i}{\partial w} \frac{\partial \xi_i}{\partial y_i}&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial \xi_i}{\partial w} = \frac{\partial y_i}{\partial w} \frac{\partial \xi_i}{\partial y_i}&lt;/script&gt;

&lt;p&gt;其中 &lt;span class=&quot;MathJax_Preview&quot;&gt;\xi_i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\xi_i&lt;/script&gt; 是平方差成本，所以 &lt;span class=&quot;MathJax_Preview&quot;&gt;{\partial \xi_i}/{\partial y_i}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;{\partial \xi_i}/{\partial y_i}&lt;/script&gt; 可以写成：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\frac{\partial \xi_i}{\partial y_i} = \frac{\partial (t_i - y_i)^2}{\partial y_i} = - 2 (t_i - y_i) = 2 (y_i - t_i)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial \xi_i}{\partial y_i} = \frac{\partial (t_i - y_i)^2}{\partial y_i} = - 2 (t_i - y_i) = 2 (y_i - t_i)&lt;/script&gt;

&lt;p&gt;又因为 &lt;span class=&quot;MathJax_Preview&quot;&gt;y_i = x_i * w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;y_i = x_i * w&lt;/script&gt;，所以我们可以把 &lt;span class=&quot;MathJax_Preview&quot;&gt;{\partial y_i}/{\partial w}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;{\partial y_i}/{\partial w}&lt;/script&gt; 写成：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\frac{\partial y_i}{\partial w} = \frac{\partial (x_i * w)}{\partial w} = x_i&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial y_i}{\partial w} = \frac{\partial (x_i * w)}{\partial w} = x_i&lt;/script&gt;

&lt;p&gt;所以样本&lt;span class=&quot;MathJax_Preview&quot;&gt;i&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;的 &lt;span class=&quot;MathJax_Preview&quot;&gt;\Delta w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Delta w&lt;/script&gt; 最终写成：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\Delta w = \mu * \frac{\partial \xi_i}{\partial w} = \mu * 2 x_i (y_i - t_i)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta w = \mu * \frac{\partial \xi_i}{\partial w} = \mu * 2 x_i (y_i - t_i)&lt;/script&gt;

&lt;p&gt;梯度下降属于&lt;strong&gt;在线处理(online processing)&lt;/strong&gt;，与之对应的是&lt;strong&gt;批量处理(batch processing)&lt;/strong&gt;。在批量处理中，我们只是简单地把所有样本的梯度相加：&lt;/p&gt;

&lt;div class=&quot;MathJax_Preview&quot;&gt;\Delta w = \mu * 2 * \sum_{i=1}^{N} x_i (y_i - t_i)&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta w = \mu * 2 * \sum_{i=1}^{N} x_i (y_i - t_i)&lt;/script&gt;

&lt;h3 id=&quot;section-6&quot;&gt;使用梯度下降&lt;/h3&gt;

&lt;p&gt;随机选取一个初始的参数值 w, 然后使用 &lt;span class=&quot;MathJax_Preview&quot;&gt;\Delta w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Delta w&lt;/script&gt; 不断地对 w 进行更新直到收敛。&lt;/p&gt;

&lt;p&gt;学习速度 &lt;span class=&quot;MathJax_Preview&quot;&gt;\mu&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; 应该拿出来作为一个超参(hyperparameter)，每个神经网络都有不同的学习速度。&lt;/p&gt;

&lt;p&gt;梯度 &lt;span class=&quot;MathJax_Preview&quot;&gt;{\partial \xi}/{\partial w}&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;{\partial \xi}/{\partial w}&lt;/script&gt; 由函数 &lt;strong&gt;gradient(w, x, t)&lt;/strong&gt; 来实现。&lt;span class=&quot;MathJax_Preview&quot;&gt;\Delta w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\Delta w&lt;/script&gt; 是由 &lt;strong&gt;delta_w(w_k, x, t, learning_rate)&lt;/strong&gt; 来计算。&lt;/p&gt;

&lt;p&gt;循环执行四次，且打印出当前的 &lt;span class=&quot;MathJax_Preview&quot;&gt;w&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt; 和 &lt;span class=&quot;MathJax_Preview&quot;&gt;\xi&lt;/span&gt;&lt;script type=&quot;math/tex&quot;&gt;\xi&lt;/script&gt;。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delta_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置初始 w 值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;nb_of_iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_of_iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dw&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'w({}): {:.4f} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; cost: {:.4f}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;w(0): 0.1000 	 cost: 13.6197
w(1): 1.5277 	 cost: 1.1239
w(2): 1.8505 	 cost: 0.4853
w(3): 1.9234 	 cost: 0.4527
w(4): 1.9399 	 cost: 0.4510
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以观察到，第二次迭代就很接近我们的目标了。&lt;/p&gt;

&lt;p&gt;我们试着画个图看看，把前两次梯度下降显示出来。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost_ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$w({})$'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$w$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xi$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Gradient descent updates plotted on cost function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nn1/output_15_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们用十次梯度下降的迭代，与原来的方法相比，画图比较一下。&lt;/p&gt;

&lt;p&gt;（两条线都过(0,0)一点，因为我们没有加偏置项(bias term)）&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nb_of_iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_of_iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'f(x)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fitted line'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'input x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'target t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'input vs. target'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nn1/output_18_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>如何在 jekyll 中嵌入 twitter</title>
   <link href="http://puxuan.coding.me//2016/07/06/twitter-on-jekyll/"/>
   <updated>2016-07-06T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/07/06/twitter-on-jekyll</id>
   <content type="html">&lt;p&gt;怎样在自己的博客中嵌入 twitter 消息呢？&lt;/p&gt;

&lt;p&gt;谷歌百度了很多相关资料，没发现相关的中文资料，大概是大家都没这样的需求吧。英文资料倒是很多，但是初步试验都不奏效。最终找了一个 ruby 插件，跟原作者讨论了很久，解决了这个问题，顺带理解了很多东西，在这里记录一下。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;第一步：下载插件&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;如果本地 repo 没有 _plugins 文件夹的话，新建一个&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir _plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在 _plugins 下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://raw.githubusercontent.com/takuti/jekyll-lazy-tweet-embedding/master/lazy_tweet_embedding.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这样一来这个插件就算是安装好了，不过还不能使用。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第二步：调整代理&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;按照作者的意思，直接在文章中插入推特的 url，然后这个 ruby 插件就可以借用推特官方提供的 API 自动把它转换成相应的可以在网页中显示的推特信息。&lt;/p&gt;

&lt;p&gt;然而当你尝试&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者 jekyll serve 等等 来创建本地站点的时候，jekyll 会报错提示你 &lt;strong&gt;connect timeout(2)&lt;/strong&gt;，这是因为我朝威武雄壮的万里长城给你把 twitter 挡住了，所以在 lazy_tweet_embedding.rb 文件中&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# convert tweet url to embedding html&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LazyTweetEmbedding&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://api.twitter.com/1/statuses/oembed.json?id=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:symbolize_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^https?:\/\/twitter\.com\/[a-zA-Z0-9_]+\/status\/([0-9]+)\/?$/&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;open(url).read 这块没法进行。&lt;/p&gt;

&lt;p&gt;好在 open-url 这个函数提供了 proxy 参数可以让我们使用，我们可以把函数改成&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:1080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:symbolize_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;127.0.0.1:1080&lt;/strong&gt;是 shadowsocks 的默认端口。&lt;/p&gt;

&lt;p&gt;但是这样改动之后依然报错，connect timeout 变成了 read timeout。&lt;/p&gt;

&lt;h2 id=&quot;polipo--shadowsocks-&quot;&gt;第三步：polipo 对 shadowsocks 进行转换&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;127.0.0.1:1080&lt;/strong&gt; 一直是我用 shadowsocks 时填的地址，不知道哪里有问题。到处查资料怎没查出个所以然来。但是看到别人引用shadowsocks 的时候都是写的：&lt;strong&gt;socks5://127.0.0.1:1080&lt;/strong&gt;，我这里函数只能写 http 因为其他的开头无法识别，我才开始意识到，socks5和 http 是两种代理。&lt;/p&gt;

&lt;p&gt;由于我这边只有 shadowsocks，所以我只能想办法把 socks 转成 http，我选择采用 polipo。&lt;/p&gt;

&lt;p&gt;具体操作可以 &lt;a href=&quot;http://io.diveinedu.com/2016/03/16/%E7%94%A8Polipo%E6%8A%8AShadowSocks%E8%BD%AC%E4%B8%BAHTTP%E4%BB%A3%E7%90%86.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;戳我&lt;/code&gt;&lt;/a&gt;，这里讲得非常清楚。&lt;/p&gt;

&lt;p&gt;开启 polipo 的时候&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;polipo &lt;span class=&quot;nv&quot;&gt;socksParentProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;localhost:1080
Established listening socket on port 8123.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;把原来的代理导到了 8123端口，所以原来的函数再改一下&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:8123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:symbolize_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每次在 jekyll build 之前先把 polipo 打开。试验一下，到这里，我们已经可以在本地完成工作了。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;第四步：真正地静态部署 jekyll&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;我一开始没有理解这个“静态”的含义。github pages + jekyll 一直说自己是静态的，然后我又是完全按照他们的步骤来的，所以我以为我的站点是静态的了。&lt;/p&gt;

&lt;p&gt;事实上，github pages + jekyll 是动态根据你的源文件生成的站点，官方甚至不需要你把 _site 文件夹推上 repo。这样一来，很多插件在 github pages 上就没有办法正常工作了。&lt;/p&gt;

&lt;p&gt;想要完全地使用 jekyll 的插件不受 github pages 的限制，但是又想要借用 github pages 的服务器？方法很简单，只把 _site 的内容推上 repo 就可以了。&lt;/p&gt;

&lt;p&gt;注意不是 _site 文件夹，是里面的全部内容。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;测试一下&lt;/h3&gt;
&lt;hr /&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Random thought: I&amp;#39;ve always wanted to be on the cover of Slam Magazine! Got to check that off the list 1 day&lt;/p&gt;&amp;mdash; Isaiah Thomas (@Isaiah_Thomas) &lt;a href=&quot;https://twitter.com/Isaiah_Thomas/status/749652458893303808&quot;&gt;July 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;在此感谢插件的原作者 &lt;a href=&quot;http://takuti.me/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Takuya Kitazawa&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>凯文杜兰特 做出了最错误的选择</title>
   <link href="http://puxuan.coding.me//2016/07/05/kd-free-agent/"/>
   <updated>2016-07-05T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/07/05/kd-free-agent</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;北京时间2016年7月4日晚上，凯文杜兰特在 &lt;em&gt;球星看台&lt;/em&gt; 上撰文 &lt;a href=&quot;http://www.theplayerstribune.com/kevin-durant-nba-free-agency-announcement/&quot; target=&quot;_blank&quot;&gt; &lt;strong&gt;“My Next Chapter”&lt;/strong&gt; &lt;/a&gt; ，宣布他将在2016-17赛季加盟金州勇士队。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section&quot;&gt;错误的决定&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;我知道大多数人也是这么想的，我还是要强调一次：&lt;strong&gt;凯文杜兰特做出了最错误的选择&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我不敢相信我刷了整晚推特却得到了这样的结果。当我看到杜兰特现身 Logan 机场的传闻的时候，我还激动地告诉我的朋友们：杜兰特要来波士顿了。然而现在，我的愤怒不是来自杜兰特的“爽约”，而是来自这种本身令人作呕的举动。我现在不是站在一个凯尔特人球迷的立场上谈问题，现在我只是一个关注 NBA 的普通球迷：“凯文杜兰特选择任意一只球队我都不会有意见，除了金州勇士。”&lt;/p&gt;

&lt;p&gt;相信我，作为一名专业的“詹姆斯批评家”，我很不想说这些，但是事实如此：今天是勒布朗詹姆斯扬眉吐气的一天。作为主动抱团的开创者，在屡次单打独斗败给凯尔特人之后，詹姆斯选择了与兄弟们一起抱团求胜。多年以来，联盟各界对此行为表示不齿。然而今天，凯文杜兰特重新定义了”不义之举“——联盟 MVP、得分王 主动投靠 刚刚在西部决赛中战胜自己的 73胜的 历史级球队。&lt;/p&gt;

&lt;p&gt;打一个简单的比方。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;诸葛亮对刘备说：“我们打不过曹操，要不我们去找孙权抱团吧。”这是詹姆斯。&lt;/li&gt;
  &lt;li&gt;诸葛亮对刘备说：“我们打不过曹操，我去投靠曹丞相了，你随意。“这是杜兰特。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;杜兰特加盟勇士，让下赛季 NBA 冠军的归属基本失去了悬念。&lt;/p&gt;

&lt;p&gt;竞技体育依赖于商业联盟而存在，所以球迷与球星对于很多事情的看法也有不同。置身事外的时候，杜兰特抱着和我们一样的想法，即是每个球队应该保持自身的竞争性，不要抱团。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Now everybody wanna play for the heat and the Lakers? Let&amp;#39;s go back to being competitive and going at these peoples!&lt;/p&gt;&amp;mdash; Kevin Durant (@KDTrey5) &lt;a href=&quot;https://twitter.com/KDTrey5/status/18688294600&quot;&gt;July 16, 2010&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;看到了吗？当年杜兰特也曾将詹姆斯拿出来批判一番。&lt;/p&gt;

&lt;p&gt;但是当自己面临选择的时候……想不到你杜兰特浓眉大眼的也叛变革命了？&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Kevin Durant, via The Players Tribune, says he will sign with Golden State.&lt;/p&gt;&amp;mdash; Chris Mannix (@ChrisMannixYS) &lt;a href=&quot;https://twitter.com/ChrisMannixYS/status/749991096332193793&quot;&gt;July 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;section-1&quot;&gt;缘何？时代的改变？&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;我认为所谓 &lt;em&gt;历史评价&lt;/em&gt; 一定程度上扭曲了球员的心理。&lt;/p&gt;

&lt;p&gt;评论家们总是不厌其烦地讨论球员的历史地位，而评价一个球员很重要的因素就是总冠军。卡尔马龙很伟大，查尔斯巴克利很伟大，雷吉米勒很伟大，斯托克顿很伟大，克里斯韦伯很伟大，这些事实球迷们、专家们都一清二楚。可是总有人能跳出来，用”可是他们没有总冠军“来否定球员们的伟大。这样的举动很残酷，很刻薄，但是也能解释为何现在的球员为何顶着巨大的舆论压力，也要拿到一个含金量不够的总冠军。&lt;/p&gt;

&lt;p&gt;【7月7日更新：雷吉米勒在 bleacher report 上撰文 &lt;a href=&quot;http://bleacherreport.com/articles/2650244-reggie-miller-kevin-durant-traded-a-sacred-legacy-for-cheap-jewelry?night=1&quot;&gt;Kevin Durant Traded a Sacred Legacy for Cheap Jewelry | 杜兰特用神圣的生涯评价去交换廉价珠宝&lt;/a&gt; ，基于同样的观点对杜兰特的举动进行了抨击。】&lt;/p&gt;

&lt;p&gt;深层次来说，有两个原因。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;对自身的不自信&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;没人敢说杜兰特不是当代最有实力的篮球运动员之一，事实上他也触摸过总冠军的边缘，并且去年险些再进总决赛并改写历史。就在这么一个应该乘胜追击的关头，杜兰特抛弃了雷霆。&lt;/p&gt;

&lt;p&gt;西部决赛： 雷霆 3-1 勇士。在被外界一致看低的情况下，把73胜不可一世的勇士逼到如此绝境，杜兰特应该对自己感到充分自信。&lt;/p&gt;

&lt;p&gt;西部决赛： 雷霆 3—2 勇士。@ Chesapeake Arena，杜兰特离将卫冕冠军淘汰只有四分钟的距离。&lt;/p&gt;

&lt;p&gt;尽管最终结果是杜兰特饮恨，但是他从这个系列赛（甚至前一个系列赛）中应该收获喜悦而不是悲伤。是的，没人看好他们越过马刺这座大山，雷霆甚至在第一场输给马刺40多分，但是他们还是挺了过来，得到了与勇士一决高下的机会。杜兰特才27岁，比斯蒂芬库里还要年轻。应该寻求自我提升的杜兰特，对自己可能失去了信心。&lt;strong&gt;坚定的人不会选择逃避，自我怀疑的人才会尝试掩盖自己的懦弱&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;保底心理—-害怕“失败”&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;短期的舆论压力如期而至，而杜兰特想要避免的可能是长期的历史级别的批评。&lt;/p&gt;

&lt;p&gt;让我们估算一下，杜兰特有20%的机会在雷霆获得（真正的）成功，95%的机会在勇士获得（所谓的）成功，杜兰特做出这样的选择很有可能基于这样的心理——拿一个冠军作为保底。&lt;/p&gt;

&lt;p&gt;说白了，拿不到冠军就是失败。起码某些人是这么想的，而很多人不是。就算是金州勇士的球迷，在兴奋之余，也许也会对杜兰特的举动感到疑惑吧。内心深处，你们也不会赞成这样的举动。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-4&quot;&gt;怎样的选择才是正确的呢？&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;依我拙见：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一档：雷霆&lt;/p&gt;

    &lt;p&gt;这个没什么多说的。俄克拉荷马就是杜兰特的家，拉塞尔维斯布鲁克就是杜兰特的亲兄弟。他们有实力，应该继续一起冲击总冠军。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二档：凯尔特人&lt;/p&gt;

    &lt;p&gt;传统豪门，教练优秀，球队处于上升期，去了可以做领袖。球迷水平就不说了，大家都懂。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第三档：马刺、快船&lt;/p&gt;

    &lt;p&gt;事实上这俩队就是弱化版的勇士。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;快船的问题在于替补太坑。雷霆本来就替补坑，然后又跑去一个替补坑的球队，这显然不合理。何况这个球队还自带西决诅咒。&lt;/li&gt;
      &lt;li&gt;马刺的问题在于球队老化。邓肯马上要退役了，暂时没找到接班的。并且杜兰特和莱昂纳德位置重叠。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第四档：热火&lt;/p&gt;

    &lt;p&gt;我其实很想给热火一个负分滚粗的，但是为了迎合本文观点，我还是放在倒数第二个好了。至今还没搞懂热火是怎么掺和进来的。可能帕特莱利得以会见杜兰特的原因就是 他是帕特莱利 吧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第五档：勇士&lt;/p&gt;

    &lt;p&gt;这个很明显了，性质太恶劣。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&amp;quot;Kevin Durant is trying to cheat his way into a championship.&amp;quot;&lt;br /&gt;&lt;br /&gt;- Charles Barkley &lt;a href=&quot;https://t.co/vf6hUC1TI6&quot;&gt;pic.twitter.com/vf6hUC1TI6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mike &amp;amp; Mike (@MikeAndMike) &lt;a href=&quot;https://twitter.com/MikeAndMike/status/750678169439600640&quot;&gt;July 6, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;不过这些都是后话了，并没什么实际作用。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;后记&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;你以为历史只会记住荣誉，而时间会冲淡其他的是是非非。&lt;/p&gt;

&lt;p&gt;首先，这是错的。其次：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/kd/pic3.png&quot; width=&quot;550&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你就这样留下维斯布鲁克一个人，未免太自私了吧。&lt;/p&gt;

&lt;p&gt;最后，“懦夫”。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If u can&amp;#39;t beat um join um 🤔&lt;/p&gt;&amp;mdash; Paul Pierce (@paulpierce34) &lt;a href=&quot;https://twitter.com/paulpierce34/status/750021937573748736&quot;&gt;July 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>利用 pycaffe API 训练神经网络</title>
   <link href="http://puxuan.coding.me//2016/06/25/caffe-test/"/>
   <updated>2016-06-25T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/06/25/caffe-test</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;导入依赖的模块&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;platform&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;caffe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;caffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_mode_cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lmdb&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.cross_validation&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StratifiedShuffleSplit&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;caffe---cuda-&quot;&gt;查看服务器上的 caffe 配置 【事实上 CUDA 没有用到】&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OS:     &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Python: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CUDA:   &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nvcc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LMDB:   &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OS:      Linux-3.13.0-65-generic-x86_64-with-Ubuntu-14.04-trusty
Python:  2.7.6 (default, Jun 22 2015, 17:58:13) 
CUDA:    Cuda compilation tools, release 5.5, V5.5.0
LMDB:    0.9.18
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;切割训练集&lt;/h1&gt;

&lt;p&gt;除去第一列和最后一列，其他都是特征&lt;/p&gt;

&lt;p&gt;最后一列是标签 –&amp;gt; 九种类 class1 - class9&lt;/p&gt;

&lt;p&gt;第一列是编号 –&amp;gt; 除去&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;将特征值对数化&lt;/h1&gt;

&lt;p&gt;x –&amp;gt; log(x+1)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'train.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vec_log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vec_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'===================='&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[ 1  0  0 ...,  0  0  0]
 [ 0  0  0 ...,  0  0  0]
 [ 0  0  0 ...,  0  0  0]
 ..., 
 [ 0  0  0 ...,  0  0  0]
 [ 1  0  0 ...,  3 10  0]
 [ 0  0  0 ...,  0  2  0]]
--------------------
[[ 0.69314718  0.          0.         ...,  0.          0.          0.        ]
 [ 0.          0.          0.         ...,  0.          0.          0.        ]
 [ 0.          0.          0.         ...,  0.          0.          0.        ]
 ..., 
 [ 0.          0.          0.         ...,  0.          0.          0.        ]
 [ 0.69314718  0.          0.         ...,  1.38629436  2.39789527  0.        ]
 [ 0.          0.          0.         ...,  0.          1.09861229  0.        ]]
====================
['Class_1' 'Class_1' 'Class_1' ..., 'Class_9' 'Class_9' 'Class_9']
--------------------
[0 0 0 ..., 8 8 8]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-3&quot;&gt;将 训练集数据 和 测试集数据 按阶层 分离&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StratifiedShuffleSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;features_training&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels_training&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;features_testing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels_testing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;lmdb&quot;&gt;将数据导进 LMDB&lt;/h1&gt;

&lt;p&gt;实测装载的时候非常慢，大概用了五分钟&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_data_into_lmdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lmdb_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lmdb_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caffe_pb2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;features.dtype unknown.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;str_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{:08}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;load_data_into_lmdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/jupyter/train_data_lmdb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;load_data_into_lmdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/jupyter/test_data_lmdb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;lmdb-&quot;&gt;检查 LMDB 内的数据是否正确&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_data_for_case_from_lmdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lmdb_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lmdb_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lmdb_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lmdb_txn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmdb_env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;raw_datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmdb_txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caffe_pb2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum_to_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get_data_for_case_from_lmdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/jupyter/train_data_lmdb/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00012345&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(2, array([[[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 1.79175949]],
 
        [[ 1.09861231]],
 
        [[ 1.38629436]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 1.38629436]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 1.38629436]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 1.09861231]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 1.38629436]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.69314718]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 1.09861231]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 2.39789534]],
 
        [[ 0.        ]],
 
        [[ 2.70805025]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]],
 
        [[ 0.        ]],
 
        [[ 0.69314718]],
 
        [[ 0.        ]]]))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-4&quot;&gt;训练模型&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/caffe/build/tools/caffe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;train&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--solver=config.prototxt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I0625 21:21:50.990250 19613 caffe.cpp:178] Use CPU.
I0625 21:21:50.990743 19613 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 10000
base_lr: 0.01
display: 10000
max_iter: 100000
lr_policy: &quot;inv&quot;
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
solver_mode: CPU
net: &quot;model_train_test.prototxt&quot;
I0625 21:21:50.990794 19613 solver.cpp:91] Creating training net from net file: model_train_test.prototxt
I0625 21:21:50.991129 19613 net.cpp:313] The NetState phase (0) differed from the phase (1) specified by a rule in layer simple
I0625 21:21:50.991161 19613 net.cpp:313] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0625 21:21:50.991237 19613 net.cpp:49] Initializing net from parameters: 
name: &quot;otto&quot;
state {
  phase: TRAIN
}
layer {
  name: &quot;otto&quot;
  type: &quot;Data&quot;
  top: &quot;data&quot;
  top: &quot;label&quot;
  include {
    phase: TRAIN
  }
  data_param {
    source: &quot;train_data_lmdb&quot;
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: &quot;ip1&quot;
  type: &quot;InnerProduct&quot;
  bottom: &quot;data&quot;
  top: &quot;ip1&quot;
  inner_product_param {
    num_output: 30
    weight_filler {
      type: &quot;xavier&quot;
    }
    bias_filler {
      type: &quot;constant&quot;
      value: 0
    }
  }
}
layer {
  name: &quot;relu1&quot;
  type: &quot;ReLU&quot;
  bottom: &quot;ip1&quot;
  top: &quot;ip1&quot;
}
layer {
  name: &quot;ip2&quot;
  type: &quot;InnerProduct&quot;
  bottom: &quot;ip1&quot;
  top: &quot;ip2&quot;
  inner_product_param {
    num_output: 9
    weight_filler {
      type: &quot;xavier&quot;
    }
    bias_filler {
      type: &quot;constant&quot;
      value: 0
    }
  }
}
layer {
  name: &quot;loss&quot;
  type: &quot;SoftmaxWithLoss&quot;
  bottom: &quot;ip2&quot;
  bottom: &quot;label&quot;
  top: &quot;loss&quot;
}
I0625 21:21:50.991331 19613 layer_factory.hpp:77] Creating layer otto
I0625 21:21:50.992022 19613 net.cpp:91] Creating Layer otto
I0625 21:21:50.992053 19613 net.cpp:399] otto -&amp;gt; data
I0625 21:21:50.992209 19613 net.cpp:399] otto -&amp;gt; label
I0625 21:21:50.992393 19615 db_lmdb.cpp:35] Opened lmdb train_data_lmdb
I0625 21:21:50.992591 19613 data_layer.cpp:41] output data size: 64,93,1,1
I0625 21:21:50.992703 19613 net.cpp:141] Setting up otto
I0625 21:21:50.992738 19613 net.cpp:148] Top shape: 64 93 1 1 (5952)
I0625 21:21:50.992756 19613 net.cpp:148] Top shape: 64 (64)
I0625 21:21:50.992764 19613 net.cpp:156] Memory required for data: 24064
I0625 21:21:50.992781 19613 layer_factory.hpp:77] Creating layer ip1
I0625 21:21:50.992805 19613 net.cpp:91] Creating Layer ip1
I0625 21:21:50.992822 19613 net.cpp:425] ip1 &amp;lt;- data
I0625 21:21:50.992849 19613 net.cpp:399] ip1 -&amp;gt; ip1
I0625 21:21:50.992956 19613 net.cpp:141] Setting up ip1
I0625 21:21:50.992977 19613 net.cpp:148] Top shape: 64 30 (1920)
I0625 21:21:50.992990 19613 net.cpp:156] Memory required for data: 31744
I0625 21:21:50.993027 19613 layer_factory.hpp:77] Creating layer relu1
I0625 21:21:50.993052 19613 net.cpp:91] Creating Layer relu1
I0625 21:21:50.993067 19613 net.cpp:425] relu1 &amp;lt;- ip1
I0625 21:21:50.993083 19613 net.cpp:386] relu1 -&amp;gt; ip1 (in-place)
I0625 21:21:50.993108 19613 net.cpp:141] Setting up relu1
I0625 21:21:50.993122 19613 net.cpp:148] Top shape: 64 30 (1920)
I0625 21:21:50.993135 19613 net.cpp:156] Memory required for data: 39424
I0625 21:21:50.993144 19613 layer_factory.hpp:77] Creating layer ip2
I0625 21:21:50.993160 19613 net.cpp:91] Creating Layer ip2
I0625 21:21:50.993173 19613 net.cpp:425] ip2 &amp;lt;- ip1
I0625 21:21:50.993191 19613 net.cpp:399] ip2 -&amp;gt; ip2
I0625 21:21:50.993227 19613 net.cpp:141] Setting up ip2
I0625 21:21:50.993243 19613 net.cpp:148] Top shape: 64 9 (576)
I0625 21:21:50.993258 19613 net.cpp:156] Memory required for data: 41728
I0625 21:21:50.993279 19613 layer_factory.hpp:77] Creating layer loss
I0625 21:21:50.993310 19613 net.cpp:91] Creating Layer loss
I0625 21:21:50.993335 19613 net.cpp:425] loss &amp;lt;- ip2
I0625 21:21:50.993361 19613 net.cpp:425] loss &amp;lt;- label
I0625 21:21:50.993391 19613 net.cpp:399] loss -&amp;gt; loss
I0625 21:21:50.993443 19613 layer_factory.hpp:77] Creating layer loss
I0625 21:21:50.993495 19613 net.cpp:141] Setting up loss
I0625 21:21:50.993518 19613 net.cpp:148] Top shape: (1)
I0625 21:21:50.993531 19613 net.cpp:151]     with loss weight 1
I0625 21:21:50.993563 19613 net.cpp:156] Memory required for data: 41732
I0625 21:21:50.993598 19613 net.cpp:217] loss needs backward computation.
I0625 21:21:50.993614 19613 net.cpp:217] ip2 needs backward computation.
I0625 21:21:50.993628 19613 net.cpp:217] relu1 needs backward computation.
I0625 21:21:50.993641 19613 net.cpp:217] ip1 needs backward computation.
I0625 21:21:50.993650 19613 net.cpp:219] otto does not need backward computation.
I0625 21:21:50.993662 19613 net.cpp:261] This network produces output loss
I0625 21:21:50.993686 19613 net.cpp:274] Network initialization done.
I0625 21:21:50.993988 19613 solver.cpp:181] Creating test net (#0) specified by net file: model_train_test.prototxt
I0625 21:21:50.994029 19613 net.cpp:313] The NetState phase (1) differed from the phase (0) specified by a rule in layer otto
I0625 21:21:50.994143 19613 net.cpp:49] Initializing net from parameters: 
name: &quot;otto&quot;
state {
  phase: TEST
}
layer {
  name: &quot;simple&quot;
  type: &quot;Data&quot;
  top: &quot;data&quot;
  top: &quot;label&quot;
  include {
    phase: TEST
  }
  data_param {
    source: &quot;test_data_lmdb&quot;
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: &quot;ip1&quot;
  type: &quot;InnerProduct&quot;
  bottom: &quot;data&quot;
  top: &quot;ip1&quot;
  inner_product_param {
    num_output: 30
    weight_filler {
      type: &quot;xavier&quot;
    }
    bias_filler {
      type: &quot;constant&quot;
      value: 0
    }
  }
}
layer {
  name: &quot;relu1&quot;
  type: &quot;ReLU&quot;
  bottom: &quot;ip1&quot;
  top: &quot;ip1&quot;
}
layer {
  name: &quot;ip2&quot;
  type: &quot;InnerProduct&quot;
  bottom: &quot;ip1&quot;
  top: &quot;ip2&quot;
  inner_product_param {
    num_output: 9
    weight_filler {
      type: &quot;xavier&quot;
    }
    bias_filler {
      type: &quot;constant&quot;
      value: 0
    }
  }
}
layer {
  name: &quot;accuracy&quot;
  type: &quot;Accuracy&quot;
  bottom: &quot;ip2&quot;
  bottom: &quot;label&quot;
  top: &quot;accuracy&quot;
  include {
    phase: TEST
  }
}
layer {
  name: &quot;loss&quot;
  type: &quot;SoftmaxWithLoss&quot;
  bottom: &quot;ip2&quot;
  bottom: &quot;label&quot;
  top: &quot;loss&quot;
}
I0625 21:21:50.994300 19613 layer_factory.hpp:77] Creating layer simple
I0625 21:21:50.994504 19613 net.cpp:91] Creating Layer simple
I0625 21:21:50.994531 19613 net.cpp:399] simple -&amp;gt; data
I0625 21:21:50.994581 19613 net.cpp:399] simple -&amp;gt; label
I0625 21:21:50.994736 19617 db_lmdb.cpp:35] Opened lmdb test_data_lmdb
I0625 21:21:50.994822 19613 data_layer.cpp:41] output data size: 100,93,1,1
I0625 21:21:50.994921 19613 net.cpp:141] Setting up simple
I0625 21:21:50.994968 19613 net.cpp:148] Top shape: 100 93 1 1 (9300)
I0625 21:21:50.995007 19613 net.cpp:148] Top shape: 100 (100)
I0625 21:21:50.995019 19613 net.cpp:156] Memory required for data: 37600
I0625 21:21:50.995035 19613 layer_factory.hpp:77] Creating layer label_simple_1_split
I0625 21:21:50.995079 19613 net.cpp:91] Creating Layer label_simple_1_split
I0625 21:21:50.995095 19613 net.cpp:425] label_simple_1_split &amp;lt;- label
I0625 21:21:50.995136 19613 net.cpp:399] label_simple_1_split -&amp;gt; label_simple_1_split_0
I0625 21:21:50.995157 19613 net.cpp:399] label_simple_1_split -&amp;gt; label_simple_1_split_1
I0625 21:21:50.995282 19613 net.cpp:141] Setting up label_simple_1_split
I0625 21:21:50.995308 19613 net.cpp:148] Top shape: 100 (100)
I0625 21:21:50.995323 19613 net.cpp:148] Top shape: 100 (100)
I0625 21:21:50.995337 19613 net.cpp:156] Memory required for data: 38400
I0625 21:21:50.995352 19613 layer_factory.hpp:77] Creating layer ip1
I0625 21:21:50.995379 19613 net.cpp:91] Creating Layer ip1
I0625 21:21:50.995393 19613 net.cpp:425] ip1 &amp;lt;- data
I0625 21:21:50.995412 19613 net.cpp:399] ip1 -&amp;gt; ip1
I0625 21:21:50.995515 19613 net.cpp:141] Setting up ip1
I0625 21:21:50.995549 19613 net.cpp:148] Top shape: 100 30 (3000)
I0625 21:21:50.995573 19613 net.cpp:156] Memory required for data: 50400
I0625 21:21:50.995620 19613 layer_factory.hpp:77] Creating layer relu1
I0625 21:21:50.995649 19613 net.cpp:91] Creating Layer relu1
I0625 21:21:50.995679 19613 net.cpp:425] relu1 &amp;lt;- ip1
I0625 21:21:50.995738 19613 net.cpp:386] relu1 -&amp;gt; ip1 (in-place)
I0625 21:21:50.995769 19613 net.cpp:141] Setting up relu1
I0625 21:21:50.995801 19613 net.cpp:148] Top shape: 100 30 (3000)
I0625 21:21:50.995843 19613 net.cpp:156] Memory required for data: 62400
I0625 21:21:50.995867 19613 layer_factory.hpp:77] Creating layer ip2
I0625 21:21:50.995970 19613 net.cpp:91] Creating Layer ip2
I0625 21:21:50.995993 19613 net.cpp:425] ip2 &amp;lt;- ip1
I0625 21:21:50.996019 19613 net.cpp:399] ip2 -&amp;gt; ip2
I0625 21:21:50.996069 19613 net.cpp:141] Setting up ip2
I0625 21:21:50.996107 19613 net.cpp:148] Top shape: 100 9 (900)
I0625 21:21:50.996150 19613 net.cpp:156] Memory required for data: 66000
I0625 21:21:50.996211 19613 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0625 21:21:50.996248 19613 net.cpp:91] Creating Layer ip2_ip2_0_split
I0625 21:21:50.996287 19613 net.cpp:425] ip2_ip2_0_split &amp;lt;- ip2
I0625 21:21:50.996340 19613 net.cpp:399] ip2_ip2_0_split -&amp;gt; ip2_ip2_0_split_0
I0625 21:21:50.996371 19613 net.cpp:399] ip2_ip2_0_split -&amp;gt; ip2_ip2_0_split_1
I0625 21:21:50.996412 19613 net.cpp:141] Setting up ip2_ip2_0_split
I0625 21:21:50.996438 19613 net.cpp:148] Top shape: 100 9 (900)
I0625 21:21:50.996472 19613 net.cpp:148] Top shape: 100 9 (900)
I0625 21:21:50.996495 19613 net.cpp:156] Memory required for data: 73200
I0625 21:21:50.996522 19613 layer_factory.hpp:77] Creating layer accuracy
I0625 21:21:50.996582 19613 net.cpp:91] Creating Layer accuracy
I0625 21:21:50.996613 19613 net.cpp:425] accuracy &amp;lt;- ip2_ip2_0_split_0
I0625 21:21:50.996639 19613 net.cpp:425] accuracy &amp;lt;- label_simple_1_split_0
I0625 21:21:50.996666 19613 net.cpp:399] accuracy -&amp;gt; accuracy
I0625 21:21:50.996717 19613 net.cpp:141] Setting up accuracy
I0625 21:21:50.996752 19613 net.cpp:148] Top shape: (1)
I0625 21:21:50.996790 19613 net.cpp:156] Memory required for data: 73204
I0625 21:21:50.996835 19613 layer_factory.hpp:77] Creating layer loss
I0625 21:21:50.996863 19613 net.cpp:91] Creating Layer loss
I0625 21:21:50.996892 19613 net.cpp:425] loss &amp;lt;- ip2_ip2_0_split_1
I0625 21:21:50.996933 19613 net.cpp:425] loss &amp;lt;- label_simple_1_split_1
I0625 21:21:50.996989 19613 net.cpp:399] loss -&amp;gt; loss
I0625 21:21:50.997023 19613 layer_factory.hpp:77] Creating layer loss
I0625 21:21:50.997079 19613 net.cpp:141] Setting up loss
I0625 21:21:50.997107 19613 net.cpp:148] Top shape: (1)
I0625 21:21:50.997134 19613 net.cpp:151]     with loss weight 1
I0625 21:21:50.997189 19613 net.cpp:156] Memory required for data: 73208
I0625 21:21:50.997210 19613 net.cpp:217] loss needs backward computation.
I0625 21:21:50.997253 19613 net.cpp:219] accuracy does not need backward computation.
I0625 21:21:50.997300 19613 net.cpp:217] ip2_ip2_0_split needs backward computation.
I0625 21:21:50.997323 19613 net.cpp:217] ip2 needs backward computation.
I0625 21:21:50.997367 19613 net.cpp:217] relu1 needs backward computation.
I0625 21:21:50.997387 19613 net.cpp:217] ip1 needs backward computation.
I0625 21:21:50.997409 19613 net.cpp:219] label_simple_1_split does not need backward computation.
I0625 21:21:50.997452 19613 net.cpp:219] simple does not need backward computation.
I0625 21:21:50.997494 19613 net.cpp:261] This network produces output accuracy
I0625 21:21:50.997516 19613 net.cpp:261] This network produces output loss
I0625 21:21:50.997550 19613 net.cpp:274] Network initialization done.
I0625 21:21:50.997707 19613 solver.cpp:60] Solver scaffolding done.
I0625 21:21:50.997813 19613 caffe.cpp:219] Starting Optimization
I0625 21:21:50.997833 19613 solver.cpp:279] Solving otto
I0625 21:21:50.997851 19613 solver.cpp:280] Learning Rate Policy: inv
I0625 21:21:50.997876 19613 solver.cpp:337] Iteration 0, Testing net (#0)
I0625 21:21:50.997894 19613 net.cpp:684] Ignoring source layer otto
I0625 21:21:50.997928 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:21:51.147842 19613 solver.cpp:404]     Test net output #0: accuracy = 0.1248
I0625 21:21:51.147912 19613 solver.cpp:404]     Test net output #1: loss = 2.1982 (* 1 = 2.1982 loss)
I0625 21:21:51.148325 19613 solver.cpp:228] Iteration 0, loss = 2.2698
I0625 21:21:51.148362 19613 solver.cpp:244]     Train net output #0: loss = 2.2698 (* 1 = 2.2698 loss)
I0625 21:21:51.148388 19613 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0625 21:21:51.150216 19616 blocking_queue.cpp:50] Waiting for data
I0625 21:21:52.493607 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:21:53.902592 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:21:55.334097 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:21:56.728524 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:21:58.064667 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:21:59.485183 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:00.884795 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:02.292704 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:03.626282 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:05.040575 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:05.066630 19613 solver.cpp:337] Iteration 10000, Testing net (#0)
I0625 21:22:05.066674 19613 net.cpp:684] Ignoring source layer otto
I0625 21:22:05.280244 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7753
I0625 21:22:05.280333 19613 solver.cpp:404]     Test net output #1: loss = 0.562419 (* 1 = 0.562419 loss)
I0625 21:22:05.282181 19613 solver.cpp:228] Iteration 10000, loss = 0.590122
I0625 21:22:05.282222 19613 solver.cpp:244]     Train net output #0: loss = 0.590122 (* 1 = 0.590122 loss)
I0625 21:22:05.282241 19613 sgd_solver.cpp:106] Iteration 10000, lr = 0.00594604
I0625 21:22:06.532089 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:07.955276 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:09.373867 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:10.800011 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:12.222946 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:13.568476 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:15.948915 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:17.467255 19613 solver.cpp:337] Iteration 20000, Testing net (#0)
I0625 21:22:17.467306 19613 net.cpp:684] Ignoring source layer otto
I0625 21:22:17.662020 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7812
I0625 21:22:17.662123 19613 solver.cpp:404]     Test net output #1: loss = 0.537839 (* 1 = 0.537839 loss)
I0625 21:22:17.663969 19613 solver.cpp:228] Iteration 20000, loss = 0.592427
I0625 21:22:17.664058 19613 solver.cpp:244]     Train net output #0: loss = 0.592428 (* 1 = 0.592428 loss)
I0625 21:22:17.664093 19613 sgd_solver.cpp:106] Iteration 20000, lr = 0.00438691
I0625 21:22:18.922065 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:20.288331 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:21.661711 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:23.067240 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:24.482105 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:25.875449 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:27.257803 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:28.639379 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:30.058917 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:31.442282 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:31.614090 19613 solver.cpp:337] Iteration 30000, Testing net (#0)
I0625 21:22:31.614181 19613 net.cpp:684] Ignoring source layer otto
I0625 21:22:31.866688 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7818
I0625 21:22:31.866756 19613 solver.cpp:404]     Test net output #1: loss = 0.538419 (* 1 = 0.538419 loss)
I0625 21:22:31.867094 19613 solver.cpp:228] Iteration 30000, loss = 0.692108
I0625 21:22:31.867120 19613 solver.cpp:244]     Train net output #0: loss = 0.692108 (* 1 = 0.692108 loss)
I0625 21:22:31.867136 19613 sgd_solver.cpp:106] Iteration 30000, lr = 0.00353553
I0625 21:22:32.981786 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:35.036489 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:36.434914 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:37.834898 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:39.246500 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:40.623255 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:43.392879 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:44.135308 19613 solver.cpp:337] Iteration 40000, Testing net (#0)
I0625 21:22:44.135383 19613 net.cpp:684] Ignoring source layer otto
I0625 21:22:44.337389 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7928
I0625 21:22:44.337458 19613 solver.cpp:404]     Test net output #1: loss = 0.53659 (* 1 = 0.53659 loss)
I0625 21:22:44.337791 19613 solver.cpp:228] Iteration 40000, loss = 0.390615
I0625 21:22:44.337815 19613 solver.cpp:244]     Train net output #0: loss = 0.390615 (* 1 = 0.390615 loss)
I0625 21:22:44.337831 19613 sgd_solver.cpp:106] Iteration 40000, lr = 0.0029907
I0625 21:22:44.903179 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:46.322223 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:47.750073 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:49.180613 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:50.587481 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:52.227707 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:53.620036 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:54.959548 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:56.326694 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:57.680536 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:22:58.088132 19613 solver.cpp:337] Iteration 50000, Testing net (#0)
I0625 21:22:58.088203 19613 net.cpp:684] Ignoring source layer otto
I0625 21:22:58.325206 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7865
I0625 21:22:58.325284 19613 solver.cpp:404]     Test net output #1: loss = 0.533907 (* 1 = 0.533907 loss)
I0625 21:22:58.325626 19613 solver.cpp:228] Iteration 50000, loss = 0.642513
I0625 21:22:58.325660 19613 solver.cpp:244]     Train net output #0: loss = 0.642514 (* 1 = 0.642514 loss)
I0625 21:22:58.325677 19613 sgd_solver.cpp:106] Iteration 50000, lr = 0.00260847
I0625 21:22:59.167842 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:00.560353 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:01.929826 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:03.290251 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:07.543730 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:08.963755 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:10.141283 19613 solver.cpp:337] Iteration 60000, Testing net (#0)
I0625 21:23:10.141357 19613 net.cpp:684] Ignoring source layer otto
I0625 21:23:10.350092 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7946
I0625 21:23:10.350184 19613 solver.cpp:404]     Test net output #1: loss = 0.535143 (* 1 = 0.535143 loss)
I0625 21:23:10.351904 19613 solver.cpp:228] Iteration 60000, loss = 0.450416
I0625 21:23:10.351976 19613 solver.cpp:244]     Train net output #0: loss = 0.450416 (* 1 = 0.450416 loss)
I0625 21:23:10.352010 19613 sgd_solver.cpp:106] Iteration 60000, lr = 0.00232368
I0625 21:23:10.458317 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:12.985669 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:14.373915 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:15.772375 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:17.176959 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:18.591495 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:19.963181 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:21.361340 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:22.740375 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:23.460054 19613 solver.cpp:337] Iteration 70000, Testing net (#0)
I0625 21:23:23.460125 19613 net.cpp:684] Ignoring source layer otto
I0625 21:23:23.599720 19613 solver.cpp:404]     Test net output #0: accuracy = 0.791
I0625 21:23:23.599808 19613 solver.cpp:404]     Test net output #1: loss = 0.533403 (* 1 = 0.533403 loss)
I0625 21:23:23.600157 19613 solver.cpp:228] Iteration 70000, loss = 0.363449
I0625 21:23:23.600206 19613 solver.cpp:244]     Train net output #0: loss = 0.363449 (* 1 = 0.363449 loss)
I0625 21:23:23.600236 19613 sgd_solver.cpp:106] Iteration 70000, lr = 0.00210224
I0625 21:23:24.187052 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:25.582316 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:26.963722 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:28.352783 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:29.731739 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:31.132463 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:32.500038 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:33.900215 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:35.241858 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:36.645187 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:37.414625 19613 solver.cpp:337] Iteration 80000, Testing net (#0)
I0625 21:23:37.414719 19613 net.cpp:684] Ignoring source layer otto
I0625 21:23:37.563081 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7939
I0625 21:23:37.563172 19613 solver.cpp:404]     Test net output #1: loss = 0.532161 (* 1 = 0.532161 loss)
I0625 21:23:37.563555 19613 solver.cpp:228] Iteration 80000, loss = 0.46377
I0625 21:23:37.563609 19613 solver.cpp:244]     Train net output #0: loss = 0.46377 (* 1 = 0.46377 loss)
I0625 21:23:37.563650 19613 sgd_solver.cpp:106] Iteration 80000, lr = 0.0019245
I0625 21:23:38.120656 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:39.509018 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:40.907493 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:42.269062 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:43.672540 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:45.081641 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:46.490942 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:47.878592 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:49.282047 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:50.670797 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:51.471745 19613 solver.cpp:337] Iteration 90000, Testing net (#0)
I0625 21:23:51.471837 19613 net.cpp:684] Ignoring source layer otto
I0625 21:23:51.687338 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7948
I0625 21:23:51.687484 19613 solver.cpp:404]     Test net output #1: loss = 0.529078 (* 1 = 0.529078 loss)
I0625 21:23:51.689254 19613 solver.cpp:228] Iteration 90000, loss = 0.553851
I0625 21:23:51.689309 19613 solver.cpp:244]     Train net output #0: loss = 0.553851 (* 1 = 0.553851 loss)
I0625 21:23:51.689342 19613 sgd_solver.cpp:106] Iteration 90000, lr = 0.00177828
I0625 21:23:52.168859 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:53.557564 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:54.936652 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:56.309146 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:57.708384 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:23:59.085268 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:24:00.478286 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:24:01.886891 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:24:03.312654 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:24:04.737825 19613 blocking_queue.cpp:50] Data layer prefetch queue empty
I0625 21:24:05.632840 19613 solver.cpp:454] Snapshotting to binary proto file _iter_100000.caffemodel
I0625 21:24:05.633457 19613 sgd_solver.cpp:273] Snapshotting solver state to binary proto file _iter_100000.solverstate
I0625 21:24:05.634476 19613 solver.cpp:317] Iteration 100000, loss = 0.359318
I0625 21:24:05.634537 19613 solver.cpp:337] Iteration 100000, Testing net (#0)
I0625 21:24:05.634572 19613 net.cpp:684] Ignoring source layer otto
I0625 21:24:05.850015 19613 solver.cpp:404]     Test net output #0: accuracy = 0.7888
I0625 21:24:05.850111 19613 solver.cpp:404]     Test net output #1: loss = 0.531829 (* 1 = 0.531829 loss)
I0625 21:24:05.850168 19613 solver.cpp:322] Optimization Done.
I0625 21:24:05.850196 19613 caffe.cpp:222] Optimization Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-5&quot;&gt;训练完成，现在来应用一下这个模型&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model_prod.prototxt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./_iter_100000.caffemodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_data_for_case_from_lmdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/jupyter/test_data_lmdb/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;00001230&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;True 
{'prob': array([[ 0.00222289,  0.92165124,  0.0368802 ,  0.02282126,  0.00101307,
         0.0023116 ,  0.00770539,  0.0020058 ,  0.0033885 ]], dtype=float32)}





&amp;lt;Container object of 9 artists&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/pycaffeTest/output_22_2.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;将神经网络图可视化&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_format&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;caffe.draw&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_pydot_graph&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;caffe.proto&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe_pb2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caffe_pb2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model_prod.prototxt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;text_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_pydot_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/pycaffeTest/output_25_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;分量可视化&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ip1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;horizontal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/pycaffeTest/output_28_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OUTPUT==============================&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/pycaffeTest/output_29_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;参考：
&lt;a href=&quot;http://rayz0620.github.io/2015/05/25/lmdb_in_caffe/&quot;&gt;Caffe中LMDB的使用&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>初试 SchemaSpy</title>
   <link href="http://puxuan.coding.me//2016/06/21/SchemaSpy/"/>
   <updated>2016-06-21T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/06/21/SchemaSpy</id>
   <content type="html">&lt;p&gt;SchemaSpy 是一个数据库图形化的工具，感觉还挺有意思。用它的初衷是画数据库实验的 ER-model 图。&lt;/p&gt;

&lt;p&gt;原网址: &lt;a href=&quot;http://schemaspy.sourceforge.net/&quot;&gt;SchemaSpy-没错，说的就是我&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我在这里使用的是 postgres 数据库，好在属于 SchemaSpy 的支持范围内。&lt;/p&gt;

&lt;p&gt;说实话，这网站做的有点难看，我找了半天没找到下载在哪里，最好拿浏览器查找一下 “download”。下好 schemaSpy_5.0.0.jar之后:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar schemaSpy_5.0.0.jar -t pgsql -db hos -u Lucius -o Downloads
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会报错，看报错原因，是因为 postgres 需要指明端口。&lt;/p&gt;

&lt;p&gt;再来。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar schemaSpy_5.0.0.jar -t pgsql -db hos -u Lucius -o Downloads -host localhost:5432
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;继续报错。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failed to query Graphviz version information
  with: dot -V
  java.io.IOException: Cannot run program &quot;dot&quot;: error=2, No such file or directory
Using database properties:
  [schemaSpy_5.0.0.jar]/net/sourceforge/schemaspy/dbTypes/pgsql.properties
java.lang.ClassNotFoundException: org.postgresql.Driver

Failed to load driver 'org.postgresql.Driver'
This entry does not point to a valid file/directory: [/whereever/postgresql-8.0-312.jdbc3.jar]

Use the -dp option to specify the location of the database
drivers for your database (usually in a .jar or .zip/.Z).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;原来还没有指定驱动路径。&lt;/p&gt;

&lt;p&gt;到  &lt;a href=&quot;https://jdbc.postgresql.org/download.html#others&quot;&gt;Postgres JDBC官网&lt;/a&gt; 下一个驱动，在命令参数 -dp 后面加上驱动的地址。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar schemaSpy_5.0.0.jar -t pgsql -db hos -u Lucius -o Downloads -host localhost:5432 -dp ~/Downloads/postgresql-9.4.1208.jre6.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还是没有得到我们想要的结果，看看报错信息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Using database properties:
  [schemaSpy_5.0.0.jar]/net/sourceforge/schemaspy/dbTypes/pgsql.properties
Gathering schema details...

No tables or views were found in schema 'Lucius'.
The schema does not exist in the database.
Make sure that you specify a valid schema with the -s option and that
  the user specified (Lucius) can read from the schema.
Note that schema names are usually case sensitive.

3 schemas exist in this database.
Some of these &quot;schemas&quot; may be users or system schemas.

information_schema pg_catalog public
These schemas contain tables/views that user 'Lucius' can see:

 information_schema pg_catalog public%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;schema-&quot;&gt;Schema 是什么？&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/schemaspy/q.jpg&quot; alt=&quot;question&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据库中的Schema，为数据库对象的集合，一个用户一般对应一个schema。&lt;/p&gt;

  &lt;p&gt;官方定义如下：
A schema is a collection of database objects (used by a user.).&lt;/p&gt;

  &lt;p&gt;schema objects are the logical structures that directly refer to the database’s data.&lt;/p&gt;

  &lt;p&gt;A user is a name defined in the database that can connect to and access objects.&lt;/p&gt;

  &lt;p&gt;schemas and users help database administrators manage database security.&lt;/p&gt;

  &lt;p&gt;从定义中我们可以看出schema为数据库对象的集合，为了区分各个集合，我们需要给这个集合起个名字，这些名字就是我们在企业管理器的方案下看到的许多类似用户名的节点，这些类似用户名的节点其实就是一个schema，schema里面包含了各种对象如tables views sequences stored procedures synonyms indexes clusters and database links。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以这个点我们应该把 schema 改成 public，放在 -s 参数后面，而不是 user 默认的 Lucius。&lt;/p&gt;

&lt;p&gt;对了，需要画 ER—model diagram 的话需要安装 &lt;strong&gt;graphviz&lt;/strong&gt;。
mac 用户直接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install graphviz 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在配置就搞定了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar schemaSpy_5.0.0.jar -t pgsql -db hos -u Lucius -o Downloads -host localhost:5432 -dp ~/Downloads/postgresql-9.4.1208.jre6.jar -s public
Using database properties:
  [schemaSpy_5.0.0.jar]/net/sourceforge/schemaspy/dbTypes/pgsql.properties
Gathering schema details.....................(1sec)
Writing/graphing summary............(0sec)
Writing/diagramming details..................(2sec)
Wrote relationship details of 18 tables/views to directory 'Downloads' in 4 seconds.
View the results by opening Downloads/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看看效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/schemaspy/1.png&quot; alt=&quot;colomn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/schemaspy/2.png&quot; alt=&quot;table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/schemaspy/3.png&quot; alt=&quot;ER&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还不错吧，更多的功能以后慢慢探索。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>KNN 算法</title>
   <link href="http://puxuan.coding.me//2016/06/04/KNN/"/>
   <updated>2016-06-04T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/06/04/KNN</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;在模式识别领域中，最近邻居法（KNN算法，又译K-近邻算法）是一种用于分类和回归的非参数统计方法。在这两种情况下，输入包含特征空间中的k个最接近的训练样本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;本文记录 KNN 算法的学习，同时也是学习和熟悉 python 的过程。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;导入包&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;operator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;从文件中读取数据，将文本转换为矩阵，提取特征和类标&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file2matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arrayLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numberOfLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#文件行数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returnMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#行数*3的空矩阵&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classLabelVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#strip()函数去掉参数中的字符，空参数则去掉空格&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;listFromLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#split()函数通过分隔符把 string 分段，返回一个 list&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;returnMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listFromLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classLabelVector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listFromLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classLabelVector&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;看一下什么效果&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;testMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file2matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'datingTestSet.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'testMat:'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;testMat:
[[  4.09200000e+04   8.32697600e+00   9.53952000e-01]
 [  1.44880000e+04   7.15346900e+00   1.67390400e+00]
 [  2.60520000e+04   1.44187100e+00   8.05124000e-01]
 ..., 
 [  2.65750000e+04   1.06501020e+01   8.66627000e-01]
 [  4.81110000e+04   9.13452800e+00   7.28045000e-01]
 [  4.37570000e+04   7.88260100e+00   1.33244600e+00]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;归一化数字特征值到0-1&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoNorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#输入是一个矩阵&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#tile()函数将 minVals 矩阵“重复”(m,1)次&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;为了更好理解这个函数，我们试试每一步的输出&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoNormTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'minVals:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'maxVals:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ranges:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'shape(dataSet):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'zeros(shape(dataSet)):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dataSet.shape[0]:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tile(minVals, (m, 1)):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dataSet - tile(minVals, (m, 1)):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tile(ranges, (m, 1)):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'normDataSet/tile(ranges, (m, 1)):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;normDataSetTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangesTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minValsTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoNormTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minVals:
[ 0.        0.        0.001156]
--------------------
maxVals:
[  9.12730000e+04   2.09193490e+01   1.69551700e+00]
--------------------
ranges:
[  9.12730000e+04   2.09193490e+01   1.69436100e+00]
--------------------
shape(dataSet):
(1000, 3)
--------------------
zeros(shape(dataSet)):
[[ 0.  0.  0.]
 [ 0.  0.  0.]
 [ 0.  0.  0.]
 ..., 
 [ 0.  0.  0.]
 [ 0.  0.  0.]
 [ 0.  0.  0.]]
--------------------
dataSet.shape[0]:
1000
--------------------
tile(minVals, (m, 1)):
[[ 0.        0.        0.001156]
 [ 0.        0.        0.001156]
 [ 0.        0.        0.001156]
 ..., 
 [ 0.        0.        0.001156]
 [ 0.        0.        0.001156]
 [ 0.        0.        0.001156]]
--------------------
dataSet - tile(minVals, (m, 1)):
[[  4.09200000e+04   8.32697600e+00   9.52796000e-01]
 [  1.44880000e+04   7.15346900e+00   1.67274800e+00]
 [  2.60520000e+04   1.44187100e+00   8.03968000e-01]
 ..., 
 [  2.65750000e+04   1.06501020e+01   8.65471000e-01]
 [  4.81110000e+04   9.13452800e+00   7.26889000e-01]
 [  4.37570000e+04   7.88260100e+00   1.33129000e+00]]
--------------------
tile(ranges, (m, 1)):
[[  9.12730000e+04   2.09193490e+01   1.69436100e+00]
 [  9.12730000e+04   2.09193490e+01   1.69436100e+00]
 [  9.12730000e+04   2.09193490e+01   1.69436100e+00]
 ..., 
 [  9.12730000e+04   2.09193490e+01   1.69436100e+00]
 [  9.12730000e+04   2.09193490e+01   1.69436100e+00]
 [  9.12730000e+04   2.09193490e+01   1.69436100e+00]]
--------------------
normDataSet/tile(ranges, (m, 1)):
[[ 0.44832535  0.39805139  0.56233353]
 [ 0.15873259  0.34195467  0.98724416]
 [ 0.28542943  0.06892523  0.47449629]
 ..., 
 [ 0.29115949  0.50910294  0.51079493]
 [ 0.52711097  0.43665451  0.4290048 ]
 [ 0.47940793  0.3768091   0.78571804]]
--------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;现在再来看看之前的函数，打点注释：&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoNorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#输入是一个矩阵&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#min()函数输出矩阵中最小的行或列，参数为0输出行，为1输出列&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#同上理&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#shape(dataSet) = (100,3)，然后做一个(100,3)的空矩阵 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# m 是 dataSet 矩阵的行数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#tile()函数将 minVals 矩阵“重复”(m,1)次&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normDataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;分类函数&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#数据集的行数就是记录数&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''计算距离'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#差值矩阵&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#差值矩阵的平方&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#每一行项的和&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#开方得到距离&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedDistIndicies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#整理索引&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''选择距离最小的k个点'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedDistIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''从大到小排序'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemgetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;为了更好理解这个函数，我们试试每一步的输出&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classifyTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#数据集的行数就是记录数&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'记录总数:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dataSet.shape[0]:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''计算距离'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'计算距离:'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#差值矩阵&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tile(sample, (dataSetSize,1)):'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'diffMat:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#差值矩阵的平方&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sqDiffMat:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#每一行项的和&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sqDistances:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#开方得到距离&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'distances:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedDistIndicies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#整理索引&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'distances.argsort():'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''选择距离最小的k个点'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'选择距离最小的k个点:'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedDistIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'第&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d近: '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'voteIlabel:'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'classCount.get(voteIlabel, 0)'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'********************'&lt;/span&gt;
        
    &lt;span class=&quot;s&quot;&gt;'''从大到小排序'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'从大到小排序:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'classCount:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
                              &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemgetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                              &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'classCount.items():'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sortedClassCount:'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'####################'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''测试用的数据:
矩阵: 3  5  7  5  4   标签: a
     4  6  2  9  0         b
     3  5  2  1  7         a
     3  6  7  3  1         a
     9  4  2  5  7         b
k 值取 3
sample 取 [4,6,3,1,5]
'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;classifyTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;记录总数:
dataSet.shape[0]:
5
--------------------
计算距离:
tile(sample, (dataSetSize,1)):
[[4 6 3 1 5]
 [4 6 3 1 5]
 [4 6 3 1 5]
 [4 6 3 1 5]
 [4 6 3 1 5]]
--------------------
diffMat:
[[ 1  1 -4 -4  1]
 [ 0  0  1 -8  4]
 [ 1  1  1  0 -2]
 [ 1  0 -4 -2  4]
 [-4  2  1 -4 -2]]
--------------------
sqDiffMat:
[[ 1  1 16 16  1]
 [ 0  0  1 64 16]
 [ 1  1  1  0  4]
 [ 1  0 16  4 16]
 [16  4  1 16  4]]
--------------------
sqDistances:
[35 81  7 37 41]
--------------------
distances:
[ 5.91607978  9.          2.64575131  6.08276253  6.40312424]
--------------------
distances.argsort():
[2 0 3 4 1]
--------------------
--------------------
--------------------
选择距离最小的k个点:
第1近: 
voteIlabel:
a
--------------------
classCount.get(voteIlabel, 0)
1
********************
第2近: 
voteIlabel:
a
--------------------
classCount.get(voteIlabel, 0)
2
********************
第3近: 
voteIlabel:
a
--------------------
classCount.get(voteIlabel, 0)
3
********************
从大到小排序:
classCount:
{'a': 3}
classCount.items():
[('a', 3)]
sortedClassCount:
[('a', 3)]
####################





'a'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-8&quot;&gt;现在再来看看之前的函数，打点注释：&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#数据集的行数就是记录数&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''计算距离'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSetSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSet&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#差值矩阵&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#差值矩阵的平方&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDiffMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#每一行项的和&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqDistances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#开方得到距离&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedDistIndicies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#整理索引&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''选择距离最小的k个点'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#创建一个字典&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#k 就是 KNN 中的 K 值&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedDistIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#选取第 i+1 近的点，对着 labels 查出他的label&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voteIlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;##该 label 的计数 加一&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''从大到小排序'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemgetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                                &lt;span class=&quot;c&quot;&gt;#将字典条目按照出现次数多少。从大到小排列&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedClassCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#取出现次数最多的 label&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-9&quot;&gt;针对约会网站的数据的测试代码&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;datingClassTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hoRatio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.20&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#测试样例数据比例&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;datingDataMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datingLabels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file2matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'datingTestSet.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minVals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoNorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datingDataMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normMat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numTestVecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hoRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;errCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numTestVecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classifierResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numTestVecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
                                    &lt;span class=&quot;n&quot;&gt;datingLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numTestVecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;分类器返回: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, 真实答案是: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classifierResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datingLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classifierResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datingLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;errCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--------------------'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;总错误率为: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numTestVecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-10&quot;&gt;调用函数，进行测试&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;datingClassTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: largeDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: didntLike
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: didntLike, 真实答案是: didntLike
分类器返回: smallDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: smallDoses, 真实答案是: smallDoses
分类器返回: largeDoses, 真实答案是: largeDoses
分类器返回: smallDoses, 真实答案是: smallDoses
--------------------
总错误率为: 0.060000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;正确率为94%.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Chalmers and Gothenburg</title>
   <link href="http://puxuan.coding.me//2016/05/23/Chalmers-and-Gothenburg/"/>
   <updated>2016-05-23T00:00:00+08:00</updated>
   <id>http://puxuan.coding.me//2016/05/23/Chalmers-and-Gothenburg</id>
   <content type="html">&lt;style&gt;
  .preview {
    display: none;
  }

  @media (min-width: 48em) {
    .preview {
      display: block;
    }
  }
&lt;/style&gt;

&lt;p&gt;&lt;em&gt;Chalmers University of Technology, Chalmers tekniska högskola in Swedish，so I’ll just call it CTH for short.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last time I wrote travel notes, I was assigned on a trip to Taiwan. I wrote down everything in strict order of time. Six months later I realized how funny it was, and I have never written any travel notes, until today.&lt;/p&gt;

&lt;p&gt;So, um, I will try to write like an adult.&lt;/p&gt;

&lt;p&gt;I’ll try. :)&lt;/p&gt;

&lt;h1 id=&quot;how-is-sweden&quot;&gt;How is Sweden?&lt;/h1&gt;

&lt;p&gt;Well, hard to say since I was there for only a week.&lt;/p&gt;

&lt;p&gt;Air is pretty good, though. Mom put 20 packs of tissue in my luggage because of my allergic rhinitis, and I came home with 19 of them. :)&lt;/p&gt;

&lt;h1 id=&quot;what-have-you-seen&quot;&gt;What have you seen?&lt;/h1&gt;

&lt;p&gt;I had the previlege to see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Notion of education in CTH&lt;/li&gt;
  &lt;li&gt;The way the city of Gothenburg works&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notion-of-education-in-cth&quot;&gt;Notion of education in CTH&lt;/h3&gt;

&lt;p&gt;I have to say that CTH had prepared a lot for us in this trip.&lt;/p&gt;

&lt;p&gt;Five days in CTH, I had the opportunities to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Listen to lecture given by a Professor in Nanotechnology&lt;img src=&quot;/public/img/Gothenburg/lecture.png&quot; alt=&quot;Lecture&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;visit Nanotechnology Clean Room&lt;img src=&quot;/public/img/Gothenburg/clean_room.png&quot; alt=&quot;Clean Room&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;visit the Power Plant of CTH&lt;img src=&quot;/public/img/Gothenburg/power_plant.png&quot; alt=&quot;Power Plant&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;visit Living Lab&lt;img src=&quot;/public/img/Gothenburg/living_lab.png&quot; alt=&quot;Living Lab&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;visit Chalmers Formula&lt;img src=&quot;/public/img/Gothenburg/chalmers_formula.png&quot; alt=&quot;Chalmers Formula&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;visit SAFER Lab&lt;/li&gt;
  &lt;li&gt;take part in an actual class&lt;/li&gt;
  &lt;li&gt;hava a discussion with a professor and several phD students in the same field and seek advice from them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;that’s not all because I have bad memory. = =&lt;/p&gt;

&lt;p&gt;The notion of education in CTH is inseparable with one word: sustainability.&lt;/p&gt;

&lt;p&gt;This university has student group just about sustainability; their research projects are closly tied with industries and try to make the city more sustainable. Many programs in CTH have “sustainability” in their names. Dustbins on campus use solar energy to compress the trash, which is really impressive. In my opinion, CTH is a small experimental plot where experiments about future are being carried out. The outcome may be applied to Gothenburg, and aiming to be applied by the whole world. Great accomplishments are being nurtured here, quietly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/science_park.png&quot; alt=&quot;Science Park&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-way-the-city-of-gothenburg-works&quot;&gt;The way the city of Gothenburg works&lt;/h3&gt;
&lt;p&gt;First impression Gothenburg left on me: “What? No traffic jam???”&lt;/p&gt;

&lt;p&gt;Gothenburg is a city near the sea with a population of 500,000 people. Public transportation is composed of trams and buses. For there are rails on the road, it’s nearly impossible to dig the road in order to contrust something else, which, believe me, is a common thing in Wuhan. City’s traffic is in order, just like a mapping to the way this city work – small and sophisticated, everything runs in coordination.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/road.png&quot; alt=&quot;Road&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see Gothenburg’s sustainability through her natural and human landscape. I am not good at describing scenery at all, especially in English, so I am just gonna demonstrate my points via photos. By the way, we seemed to be lucky enough to meet the finest weather in Gothenburg. That’s right, everybody in Gothenburg said that. = =&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/s1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;inside Göteborgs Universitet&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/s2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Göteborgs botaniska trädgård&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/s3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Campus Lindholmen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;what-have-you-gained&quot;&gt;What have you gained?&lt;/h1&gt;

&lt;p&gt;I got answers to that question on the first day I met with the everybody. Becoming good friends with a group of people coming from different cultural and academic backgrounds is totally awesome.&lt;/p&gt;

&lt;p&gt;I didn’t mention it above, but it’s a big part of CTH: different cultures. Students from over 70 countries study together in CTH. They get to know how people from different cultures think, so they can broaden their own train of thought. Thus, you can play with buddies from all over the world and that’s pretty cool.&lt;/p&gt;

&lt;p&gt;Being 19 yrs old, I am the youngest among seven winners. Other guys are either finishing their bachelor or already working. Jovita and Kelvin, elite architect and civil engineer who I envy because I wanted to study architecture in the first place. Guilherme and Sridharan, both smart guys and funny as well. Yuying, promising future with plenty possibilities waiting for her. Noor, the super brainiac from MIT, probably the most clever person I have ever met. It was the first time that I had the chance to chat with people from so many different countries. A totally new experience!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/chalmers_groupie.png&quot; alt=&quot;Chalmers Groupie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Student ambassadors are very, very enthusiastic. They made me feel at home. Yuxi, Chang, Anali, Patricia, Aksa, Daphne, Mrina, Akshay, Emma. They are all really nice people (That’s right, I am good at remembering names now, hah). They were busy, but they came joining us as soon as they had some free time. &lt;em&gt;And I’m sure they are not doing it for the free lunch, just kidding.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/restaurant_groupie.png&quot; alt=&quot;Restaurant Groupie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And I must mention Abhi.&lt;/strong&gt; Absolutely a great leader and organizer. Extremely funny guy who always cracked us up (come on, I laughed all the time…). His department and the University should feel lucky to have a guy like Abhi. I mean it.&lt;/p&gt;

&lt;p&gt;There is an idiom in China “井底之蛙” meaning “the frog in the pit”. I never thought that word had anything to do with me. But after some time with those guys, I feel like a frog. I thought I knew much but I actually knew
little. Those guys are outstanding talent from respective culture and academic field. They show me the beauty of multi-culture. They made me jump out of that pit and see the bigger picture. Trying to break through limitation, thinking on the international level and learning from different cultures. These are probably reasons CTH recruits talent from all over the world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/rock_groupie.png&quot; alt=&quot;Rock Groupie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Gothenburg/cafe_groupie.png&quot; alt=&quot;Cafe Groupie&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;anything-more&quot;&gt;Anything more?&lt;/h1&gt;

&lt;p&gt;Much gratitude to everyone who has made this trip possible and fantasic indeed.&lt;/p&gt;

&lt;p&gt;Hopefully I may visit Gothenburg again someday.&lt;/p&gt;

&lt;p&gt;In the meantime, if you are interested in sustainability and multicultural atmosphere, CTH is the place to be.&lt;/p&gt;
</content>
 </entry>
 

</feed>
